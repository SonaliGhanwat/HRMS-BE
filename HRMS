### Eclipse Workspace Patch 1.0
#P HRMS
diff --git .gitignore .gitignore
new file mode 100644
index 0000000..b83d222
--- /dev/null
+++ .gitignore
@@ -0,0 +1 @@
+/target/
diff --git "a/.settings/org.eclipse.jdt.core\0501\051.prefs" "b/.settings/org.eclipse.jdt.core\0501\051.prefs"
new file mode 100644
index 0000000..f4217b0
--- /dev/null
+++ "b/.settings/org.eclipse.jdt.core\0501\051.prefs"
@@ -0,0 +1,12 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
+org.eclipse.jdt.core.compiler.source=1.7
diff --git "a/.settings/org.eclipse.m2e.core\0501\051.prefs" "b/.settings/org.eclipse.m2e.core\0501\051.prefs"
new file mode 100644
index 0000000..14b697b
--- /dev/null
+++ "b/.settings/org.eclipse.m2e.core\0501\051.prefs"
@@ -0,0 +1,4 @@
+activeProfiles=
+eclipse.preferences.version=1
+resolveWorkspaceProjects=true
+version=1
diff --git "a/.settings/org.eclipse.wst.common\0501\051.component" "b/.settings/org.eclipse.wst.common\0501\051.component"
new file mode 100644
index 0000000..ecd5b6b
--- /dev/null
+++ "b/.settings/org.eclipse.wst.common\0501\051.component"
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?><project-modules id="moduleCoreId" project-version="1.5.0">
+  <wb-module deploy-name="HRMS">
+    <property name="java-output-path" value="/target/classes"/>
+        <property name="context-root" value="HRMS"/>
+    <wb-resource deploy-path="/WEB-INF/classes" source-path="src/main/java"/>
+    <wb-resource deploy-path="/WEB-INF/classes" source-path="src/main/resources"/>
+        <wb-resource deploy-path="/" source-path="/target/m2e-wtp/web-resources"/>
+        <wb-resource deploy-path="/" source-path="/src/main/webapp" tag="defaultRootSource"/>
+        <wb-resource deploy-path="/WEB-INF/classes" source-path="/src/main/java"/>
+        <wb-resource deploy-path="/WEB-INF/classes" source-path="/src/main/resources"/>
+  </wb-module>
+</project-modules>
diff --git "a/.settings/org.eclipse.wst.common.project.facet.core\0501\051.xml" "b/.settings/org.eclipse.wst.common.project.facet.core\0501\051.xml"
new file mode 100644
index 0000000..a9cc358
--- /dev/null
+++ "b/.settings/org.eclipse.wst.common.project.facet.core\0501\051.xml"
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<faceted-project>
+  <fixed facet="jst.java"/>
+  <fixed facet="jst.web"/>
+  <installed facet="jst.java" version="1.7"/>
+  <installed facet="jst.web" version="2.5"/>
+</faceted-project>
diff --git "a/.settings/org.eclipse.wst.validation\0501\051.prefs" "b/.settings/org.eclipse.wst.validation\0501\051.prefs"
new file mode 100644
index 0000000..6f1cba6
--- /dev/null
+++ "b/.settings/org.eclipse.wst.validation\0501\051.prefs"
@@ -0,0 +1,2 @@
+disabled=06target
+eclipse.preferences.version=1
diff --git src/main/java/com/nextech/hrms/controller/EmployeeAttendanceController.java src/main/java/com/nextech/hrms/controller/EmployeeAttendanceController.java
index 00af424..5cd0936 100644
--- src/main/java/com/nextech/hrms/controller/EmployeeAttendanceController.java
+++ src/main/java/com/nextech/hrms/controller/EmployeeAttendanceController.java
@@ -1,7 +1,7 @@
 package com.nextech.hrms.controller;
+
 import java.sql.SQLException;
 import java.sql.Time;
-import java.util.Date;
 import java.util.List;
 
 import org.apache.log4j.Logger;
@@ -17,63 +17,58 @@
 import com.nextech.hrms.model.Employeeattendance;
 import com.nextech.hrms.model.Status;
 import com.nextech.hrms.services.EmployeeAttendanceServices;
+import com.nextech.hrms.util.DateUtil;
+import com.nextech.hrms.util.YearUtil;
 
 @Controller
 @RequestMapping("/employeeattendance")
 public class EmployeeAttendanceController {
+	public static final String USER_DOES_NOT_EXISTS = "We are sorry. This user does not exist.";
 	public long totaltime;
- 
 
 	@Autowired
 	EmployeeAttendanceServices employeeAttendanceServices;
 
-	static final Logger logger = Logger.getLogger(EmployeeAttendanceController.class);
+	static final Logger logger = Logger
+			.getLogger(EmployeeAttendanceController.class);
 
 	@RequestMapping(value = "/create", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
-	public @ResponseBody
-	Status addEmployeeAttendance(@RequestBody Employeeattendance employeeattendance) {
+	public @ResponseBody Status addEmployeeAttendance(@RequestBody Employeeattendance employeeattendance) {
 		try {
-			
 			Employeeattendance employeeattendance1 = employeeAttendanceServices.getEmpolyeeAttendanceByIdandDate(employeeattendance.getEmployee().getId(), employeeattendance.getDate());
-			if(employeeattendance1==null){
-			employeeattendance.setIsActive(true);
-			Time intime = employeeattendance.getIntime();
-			Time outtime = employeeattendance.getOuttime();
-			totaltime=outtime.getTime()-intime.getTime();
-			long diffHours = totaltime / (60 * 60 * 1000) % 24;
-			System.out.print("Totaltime\n"  +diffHours);
-			employeeattendance.setTotaltime(diffHours);
-			getEmployeeAttendanceStatus(employeeattendance);
-			employeeAttendanceServices.addEntity(employeeattendance);
-		}else{
-			return new Status(1, "EmployeeId and Date Already Exit");
-		}
+			if (employeeattendance1 == null) {
+				employeeattendance.setIsActive(true);
+				totaltime(employeeattendance);
+				employeeAttendanceServices.addEntity(employeeattendance);
+			} else {
+				return new Status(1, "EmployeeId and Date Already Exit");
+			}
 			return new Status(1, "Employee added Successfully !");
 		} catch (Exception e) {
-			// e.printStackTrace();
-			return new Status(0, e.toString());
+			System.out.println("Inside Exception");
+			e.printStackTrace();
+			return new Status(0, e.getCause().getMessage());
 		}
 	}
 
 	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
-	public @ResponseBody
-	Status getEmployeeAttendance(@PathVariable("id") long id) {
+	public @ResponseBody Status getEmployeeAttendance(
+			@PathVariable("id") long id) {
 		Employeeattendance employeeattendance = null;
 		try {
 			employeeattendance = employeeAttendanceServices.getEntityById(id);
-			if(employeeattendance==null){
-				return new Status(1,"please enter valid Id");
+			if (employeeattendance == null) {
+				return new Status(1, USER_DOES_NOT_EXISTS);
 			}
 
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
-		return new Status(1, "Employee List",employeeattendance);
+		return new Status(1, "Employee List", employeeattendance);
 	}
 
 	@RequestMapping(value = "/list", method = RequestMethod.GET)
-	public @ResponseBody
-    List<Employeeattendance> getEmployee() {
+	public @ResponseBody List<Employeeattendance> getEmployee() {
 
 		List<Employeeattendance> employeeattendanceList = null;
 		try {
@@ -86,87 +81,105 @@
 	}
 
 	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
-	public @ResponseBody
-	Status deleteEmployee(@PathVariable("id") long id) {
+	public @ResponseBody Status deleteEmployee(@PathVariable("id") long id) {
 
 		try {
-			Employeeattendance employeeattendance =employeeAttendanceServices.getEntityById(id);
-			if(employeeattendance==null){
-				return new Status(1,"please enter valid Id");
+			Employeeattendance employeeattendance = employeeAttendanceServices
+					.getEntityById(id);
+			if (employeeattendance == null) {
+				return new Status(1, USER_DOES_NOT_EXISTS);
 			}
 			employeeattendance.setIsActive(false);
 			employeeAttendanceServices.updateEntity(employeeattendance);
-			//employeeServices.deleteEntity(id);
+			// employeeServices.deleteEntity(id);
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
 		return new Status(1, "Employee deleted Successfully !");
 	}
-	
+
 	@RequestMapping(value = "/update", method = RequestMethod.PUT)
-	public @ResponseBody Status updateEntity(@RequestBody Employeeattendance employeeattendance) {
+	public @ResponseBody Status updateEntity(
+			@RequestBody Employeeattendance employeeattendance) {
 
 		try {
-			
-			Time intime = employeeattendance.getIntime();
-			Time outtime = employeeattendance.getOuttime();
-			totaltime=outtime.getTime()-intime.getTime();
-			long diffHours = totaltime / (60 * 60 * 1000) % 24;
-			System.out.print("Totaltime\n"  +diffHours);
-			employeeattendance.setTotaltime(diffHours);
-			getEmployeeAttendanceStatus(employeeattendance);
+			totaltime(employeeattendance);
 			employeeAttendanceServices.updateEntity(employeeattendance);
-			return new Status(1, "Employee update Successfully !");
 		} catch (Exception e) {
 			e.printStackTrace();
-			return new Status(0, e.toString());
-		}
 
-	}
-	
-	@SuppressWarnings("unused")
-	@RequestMapping(value = "/UPDATE-EMPLOYEEATTENDANCE/{EMP-ID}/{date}", method = RequestMethod.PUT)
-	public @ResponseBody 
-	Status updateEmplyeeAttendanceByEmpId(@RequestBody Employeeattendance employeeattendance,@PathVariable("EMP-ID") long empID,@PathVariable("date") Date date) {
-		 
-		try {
-		Employeeattendance 	employeeattendanceOld =employeeAttendanceServices.getEmployeeAttendanceByEmployeeId(empID,date);
-		employeeattendanceOld.setIntime(employeeattendance.getIntime());
-		employeeattendanceOld.setOuttime(employeeattendance.getOuttime());
-		Time intime = employeeattendanceOld.getIntime();
-		Time outtime = employeeattendanceOld.getOuttime();
-		totaltime=outtime.getTime()-intime.getTime();
-		long diffHours = totaltime / (60 * 60 * 1000) % 24;
-		System.out.print("Totaltime\n"  +diffHours);
-		employeeattendanceOld.setTotaltime(diffHours);
-		getEmployeeAttendanceStatus(employeeattendanceOld);
-		employeeAttendanceServices.updateEntity(employeeattendanceOld);
-		if(employeeattendanceOld==null){
-				return new Status(1, "please enter valid Id");
-			}
-		} catch (Exception e) {
-			e.printStackTrace();
 		}
 		return new Status(1, "Employee update Successfully !");
 	}
-	
-	 public void getEmployeeAttendanceStatus(Employeeattendance employeeAttendance) throws ClassNotFoundException, SQLException{
-		 try {
-		        if(employeeAttendance.getTotaltime()>=1 && employeeAttendance.getTotaltime()<=4){
-			        employeeAttendance.setStatus("HalfDay");
-		        }else if(employeeAttendance.getTotaltime()>=4){
-			        employeeAttendance.setStatus("Fullday");
-		        }else{
-			        employeeAttendance.setStatus("Absent");
-		        }
-	    	}
-	        catch (Exception e)
-	        {
-	          System.err.println("Got an exception!");
-	          e.printStackTrace();
-	        }
-	        
+
+	@RequestMapping(value = "/getemployeeattendance/{currentdate}", method = RequestMethod.GET)
+	public @ResponseBody Status getEmployeeAttendanceByIdandMonth( @PathVariable("currentdate") String date) {
+		List<Employeeattendance> employeeattendanceList = null;
+		try {
+			employeeattendanceList = employeeAttendanceServices
+					.getEmployeeattendanceByCurrentDate(DateUtil.convertToDate(date));
+			if(employeeattendanceList==null){
+				
+				return new Status(1,USER_DOES_NOT_EXISTS);
+			}
+
+		} catch (Exception e) {
+			e.printStackTrace();
+
 		}
+		return new Status(1, "Employee Attendance!", employeeattendanceList);
+
+	}
+	
+	@RequestMapping(value = "/attendance/{id}/{Year-Month}", method = RequestMethod.GET)
+	public @ResponseBody Status calculateEmployeeAttendanceByIdandMonth(
+			@PathVariable("id") long empId, @PathVariable("Year-Month") String date) {
+		List<Employeeattendance> employeeattendanceList = null;
+		String count="";
+		try {
+			employeeattendanceList = employeeAttendanceServices
+					.calculateEmployeeAttendanceByEmployeeIdandDate(empId,YearUtil.convertToDate(date));
+
+			  count = String.valueOf(employeeattendanceList.size());
+			 System.out.println("Employee Attedance"+count);
+
+		} catch (Exception e) {
+			e.printStackTrace();
+
+		}
+
+		return new Status(1, "Employee Attendance!",count);
+
+	}
+
+	public void getEmployeeAttendanceStatus(
+			Employeeattendance employeeAttendance)
+			throws ClassNotFoundException, SQLException {
+		try {
+			if (employeeAttendance.getTotaltime() >= 1
+					&& employeeAttendance.getTotaltime() <= 4) {
+				employeeAttendance.setStatus("HalfDay");
+			} else if (employeeAttendance.getTotaltime() >= 4) {
+				employeeAttendance.setStatus("Fullday");
+			} else {
+				employeeAttendance.setStatus("Absent");
+			}
+		} catch (Exception e) {
+			System.err.println("Got an exception!");
+			e.printStackTrace();
+		}
+
+	}
+	
+	public void totaltime(Employeeattendance employeeattendance) throws ClassNotFoundException, SQLException{
+		Time intime = employeeattendance.getIntime();
+		Time outtime = employeeattendance.getOuttime();
+		totaltime = outtime.getTime() - intime.getTime();
+		long diffHours = totaltime / (60 * 60 * 1000) % 24;
+		System.out.print("Totaltime\n" + diffHours);
+		employeeattendance.setTotaltime(diffHours);
+		getEmployeeAttendanceStatus(employeeattendance);
+		
+	}
+
 }
-
-
diff --git src/main/java/com/nextech/hrms/controller/EmployeeController.java src/main/java/com/nextech/hrms/controller/EmployeeController.java
index 31c8460..9734ca4 100644
--- src/main/java/com/nextech/hrms/controller/EmployeeController.java
+++ src/main/java/com/nextech/hrms/controller/EmployeeController.java
@@ -2,10 +2,15 @@
 
 import java.util.List;
 
+import javax.persistence.PersistenceException;
+import javax.validation.ConstraintViolationException;
+import javax.validation.Valid;
+
 import org.apache.log4j.Logger;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.MediaType;
 import org.springframework.stereotype.Controller;
+import org.springframework.validation.BindingResult;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -19,6 +24,7 @@
 @Controller
 @RequestMapping("/employee")
 public class EmployeeController {
+	public static final String USER_DOES_NOT_EXISTS = "We are sorry. This user does not exist.";
 
 	@Autowired
 	EmployeeServices employeeServices;
@@ -26,43 +32,60 @@
 	static final Logger logger = Logger.getLogger(EmployeeController.class);
 
 	@RequestMapping(value = "/create", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
-	public @ResponseBody
-	Status addEmployee(@RequestBody Employee employee) {
+	public @ResponseBody Status addEmployee(@Valid @RequestBody Employee employee,BindingResult bindingResult) throws Exception {
 		try {
+			if (bindingResult.hasErrors()) { 
+				return new Status(0, bindingResult.getFieldError()
+				.getDefaultMessage());
+				}
 			
 			Employee employee1 = employeeServices.getEmployeeByUserId(employee.getUserid());
 			Employee employee2 = employeeServices.getEmployeeByphoneNumber(employee.getPhoneNumber());
 			Employee employee3 = employeeServices.getEmpolyeeByEmailid(employee.getEmailid());
 			if(employee1==null){
-			if(employee2==null){
-			if(employee3==null){
-			employee.setIsActive(true);
-			employeeServices.addEntity(employee);
-			
-			}else{
-				return new Status(1, "EmailId Already Exit");
-			}
-			}else{
-				return new Status(1, "Phone Number Already Exit");
-			}
 			}else{
 				return new Status(1, "UserId Already Exit");
 			}
+			if(employee2==null){
+			}
+			else{
+				return new Status(1, "Phone Number Already Exit");
+			}
+			if(employee3==null){
+			}
+			else{
+				return new Status(1, "EmailId Already Exit");
+			}
+			
+			employee.setIsActive(true);
+			employeeServices.addEntity(employee);
 			return new Status(1, "Employee added Successfully !");
+		} catch (ConstraintViolationException cve) {
+			System.out.println("Inside ConstraintViolationException");
+			cve.printStackTrace();
+			return new Status(0, cve.getCause().getMessage());
+		} catch (PersistenceException pe) {
+			System.out.println("Inside PersistenceException");
+			pe.printStackTrace();
+			return new Status(0, pe.getCause().getMessage());
 		} catch (Exception e) {
-		     e.printStackTrace();
-			return new Status(0, e.toString());
+			System.out.println("Inside Exception");
+			e.printStackTrace();
+			return new Status(0, e.getCause().getMessage());
 		}
+
 	}
+	
 
 	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
 	public @ResponseBody
 	Status getEmployee(@PathVariable("id") long id) {
 		Employee employee = null;
 		try {
+			
 			employee = employeeServices.getEntityById(id);
 			if(employee==null){
-				return new Status(1,"please Enter valid id");
+				return new Status(1,USER_DOES_NOT_EXISTS);
 			}
 
 		} catch (Exception e) {
@@ -94,11 +117,11 @@
 		try {
 			employee =employeeServices.getEntityById(id);
             if(employee==null){
-				return new Status(1,"please Enter valid id");
+				return new Status(1,USER_DOES_NOT_EXISTS);
 			}
 			employee.setIsActive(false);
 			employeeServices.updateEntity(employee);
-			//employeeServices.deleteEntity(id);
+		   //employeeServices.deleteEntity(id);
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
@@ -106,15 +129,16 @@
 	}
 	
 	@RequestMapping(value = "/update", method = RequestMethod.PUT)
-	public @ResponseBody Status updateEntity(@PathVariable("id") long id) {
-		Employee employee = null;
+	public @ResponseBody Status updateEntity(@RequestBody Employee employee) {
 		try {
 			employeeServices.updateEntity(employee);
-			return new Status(1, "Employee update Successfully !");
+			 if(employee==null){
+					return new Status(1,USER_DOES_NOT_EXISTS);
+				}
 		} catch (Exception e) {
-			return new Status(0, e.toString());
+			e.printStackTrace();
 		}
-
+		return new Status(1, "Employee Update Successfully !");
 	}
 	
 }
diff --git src/main/java/com/nextech/hrms/controller/EmployeeDailyTaskController.java src/main/java/com/nextech/hrms/controller/EmployeeDailyTaskController.java
index 1992736..2e5d46f 100644
--- src/main/java/com/nextech/hrms/controller/EmployeeDailyTaskController.java
+++ src/main/java/com/nextech/hrms/controller/EmployeeDailyTaskController.java
@@ -13,7 +13,6 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.ResponseBody;
 
-import com.nextech.hrms.model.Employeeattendance;
 import com.nextech.hrms.model.Employeedailytask;
 import com.nextech.hrms.model.Status;
 import com.nextech.hrms.services.EmployeeDailyTaskServices;
@@ -22,23 +21,19 @@
 @RequestMapping("/employeedailytask")
 public class EmployeeDailyTaskController {
 	public long totaltime;
+	public static final String USER_DOES_NOT_EXISTS = "We are sorry. This user does not exist.";
 
 	@Autowired
 	EmployeeDailyTaskServices employeeDailyTaskServices;
 
-	static final Logger logger = Logger.getLogger(EmployeeController.class);
+	static final Logger logger = Logger.getLogger(EmployeeDailyTaskController.class);
 
 	@RequestMapping(value = "/create", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
 	public @ResponseBody
 	Status addEmployee(@RequestBody Employeedailytask employeedailytask) {
 		try {
 			employeedailytask.setIsActive(true);
-			Time starttime = employeedailytask.getStarttime();
-			Time endtime = employeedailytask.getEndtime();
-			totaltime = endtime.getTime()-starttime.getTime();
-			long diffHours = totaltime / (60 * 60 * 1000) % 24;
-			System.out.print("Totaltime\n"  +diffHours);
-			employeedailytask.setTakenTime(diffHours);
+			totalTime(employeedailytask);
 			employeeDailyTaskServices.addEntity(employeedailytask);
 			return new Status(1, "Employee added Successfully !");
 		} catch (Exception e) {
@@ -54,7 +49,7 @@
 		try {
 			employeedailytask = employeeDailyTaskServices.getEntityById(id);
 			if(employeedailytask==null){
-				return new Status(1,"please Enter valid id");
+				return new Status(1,USER_DOES_NOT_EXISTS);
 			}
 			
 		} catch (Exception e) {
@@ -85,7 +80,7 @@
 		try {
 			Employeedailytask employeedailytask = employeeDailyTaskServices.getEntityById(id);
 			if(employeedailytask==null){
-				return new Status(1,"please Enter valid id");
+				return new Status(1,USER_DOES_NOT_EXISTS);
 			}
 			employeedailytask.setIsActive(false);
 			employeeDailyTaskServices.updateEntity(employeedailytask);
@@ -94,13 +89,14 @@
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
-		return new Status(1, "Employee deleted Successfully !");
+		return new Status(1, "Employee deleted Successfully!");
 	}
 	
 	@RequestMapping(value = "/update", method = RequestMethod.PUT)
 	public @ResponseBody Status updateEntity(@RequestBody Employeedailytask employeedailytask) {
 
 		try {
+			totalTime(employeedailytask);
 			employeeDailyTaskServices.updateEntity(employeedailytask);
 			return new Status(1, "Employee update Successfully !");
 		} catch (Exception e) {
@@ -108,4 +104,12 @@
 		}
 
 	}
+	public void totalTime(Employeedailytask employeedailytask){
+		Time starttime = employeedailytask.getStarttime();
+		Time endtime = employeedailytask.getEndtime();
+		totaltime = endtime.getTime()-starttime.getTime();
+		long diffHours = totaltime / (60 * 60 * 1000) % 24;
+		System.out.print("Totaltime\n"  +diffHours);
+		employeedailytask.setTakenTime(diffHours);
+	}
 }
diff --git src/main/java/com/nextech/hrms/controller/EmployeeLeaveController.java src/main/java/com/nextech/hrms/controller/EmployeeLeaveController.java
new file mode 100644
index 0000000..bf7789f
--- /dev/null
+++ src/main/java/com/nextech/hrms/controller/EmployeeLeaveController.java
@@ -0,0 +1,158 @@
+package com.nextech.hrms.controller;
+import java.util.List;
+
+import org.apache.log4j.Logger;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.MediaType;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.ResponseBody;
+
+import com.nextech.hrms.model.EmployeeLeaveDTO;
+import com.nextech.hrms.model.Employeeattendance;
+import com.nextech.hrms.model.Employeeleave;
+import com.nextech.hrms.model.Status;
+import com.nextech.hrms.services.EmployeeLeaveServices;
+import com.nextech.hrms.util.DateUtil;
+import com.nextech.hrms.util.YearUtil;
+
+
+@Controller
+@RequestMapping("/employeeleave")
+public class EmployeeLeaveController {
+	public long totaltime;
+	public static final String USER_DOES_NOT_EXISTS = "We are sorry. This user does not exist.";
+ 
+
+	@Autowired
+	EmployeeLeaveServices employeeLeaveServices;
+
+	static final Logger logger = Logger.getLogger(EmployeeLeaveController.class);
+
+	@RequestMapping(value = "/create", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
+	public @ResponseBody
+	Status addEmployeeAttendance(@RequestBody Employeeleave employeeleave) {
+		try {
+			
+			Employeeleave employeeleave1 = employeeLeaveServices.getEmpolyeeleaveByIdandDate(employeeleave.getEmployee().getId(), employeeleave.getLeavedate());
+			if(employeeleave1==null){
+			    employeeleave.setIsActive(true);
+				employeeLeaveServices.addEntity(employeeleave);
+		}else{
+			return new Status(1, "EmployeeId and Date Already Exit");
+		}
+			return new Status(1, "Employee added Successfully !");
+		} catch (Exception e) {
+			// e.printStackTrace();
+			return new Status(0, e.toString());
+		}
+	}
+
+	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
+	public @ResponseBody
+	Status getEmployeeAttendance(@PathVariable("id") long id) {
+		Employeeleave employeeleave = null;
+		try {
+			employeeleave = employeeLeaveServices.getEntityById(id);
+			if(employeeleave==null){
+				return new Status(1,USER_DOES_NOT_EXISTS);
+			}
+
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+		return new Status(1, "Employee List",employeeleave);
+	}
+
+	@RequestMapping(value = "/list", method = RequestMethod.GET)
+	public @ResponseBody
+    List<Employeeleave> getEmployee() {
+
+		List<Employeeleave> employeeleaveList = null;
+		try {
+			employeeleaveList = employeeLeaveServices.getEntityList();
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+
+		return employeeleaveList;
+	}
+
+	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
+	public @ResponseBody
+	Status deleteEmployee(@PathVariable("id") long id) {
+
+		try {
+			Employeeleave employeeleave =employeeLeaveServices.getEntityById(id);
+			if(employeeleave==null){
+				return new Status(1,USER_DOES_NOT_EXISTS);
+			}
+			employeeleave.setIsActive(false);
+			employeeLeaveServices.updateEntity(employeeleave);
+			//employeeServices.deleteEntity(id);
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+		return new Status(1, "Employee deleted Successfully !");
+	}
+	
+	@RequestMapping(value = "/update", method = RequestMethod.PUT)
+	public @ResponseBody Status updateEntity(@RequestBody Employeeleave employeeleave) {
+
+		try {
+			employeeLeaveServices.updateEntity(employeeleave);
+			return new Status(1, "Employee update Successfully !");
+		} catch (Exception e) {
+			e.printStackTrace();
+			return new Status(1,USER_DOES_NOT_EXISTS);
+		}
+
+	}
+	
+	@RequestMapping(value = "/leaveyear/{id}", method = RequestMethod.GET)
+	public @ResponseBody List<EmployeeLeaveDTO> getYearlyEmployeeLeaveByEmployeeId(@PathVariable("id") long empId) {
+		List<EmployeeLeaveDTO> employeeleaves = null;
+		try {
+			 employeeleaves = employeeLeaveServices.getYearlyEmployeeLeaveByEmployeeId(empId);
+		
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+		return employeeleaves;
+	}
+	
+	@RequestMapping(value = "/leavemonth/{id}/{Year-Month}", method = RequestMethod.GET)
+	public @ResponseBody Status getMonthlyEmployeeLeaveByEmployeeId(@PathVariable("id") long empId,@PathVariable("Year-Month") String date) {
+		
+		try {
+			List<Employeeleave> employeeleaves = null;
+			 employeeleaves = employeeLeaveServices.getMonthlyEmployeeLeaveByEmployeeId(empId,YearUtil.convertToDate(date));
+		
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+		return new Status(1,"Employee Leave");
+	}
+	
+	@RequestMapping(value = "/getemployeeleave/{currentdate}", method = RequestMethod.GET)
+	public @ResponseBody Status getEmployeeAttendanceByIdandMonth( @PathVariable("currentdate") String date) {
+		List<Employeeleave> employeeleaveList = null;
+		try {
+			employeeleaveList = employeeLeaveServices
+					.getEmployeeLeaveByCurrentDate(DateUtil.convertToDate(date));
+
+		} catch (Exception e) {
+			e.printStackTrace();
+			return new Status(1,USER_DOES_NOT_EXISTS);
+
+		}
+
+		return new Status(1, "Employee Leave!", employeeleaveList);
+
+	}
+}
+
+
diff --git src/main/java/com/nextech/hrms/controller/UserTypeController.java src/main/java/com/nextech/hrms/controller/UserTypeController.java
new file mode 100644
index 0000000..88113f7
--- /dev/null
+++ src/main/java/com/nextech/hrms/controller/UserTypeController.java
@@ -0,0 +1,111 @@
+package com.nextech.hrms.controller;
+
+import java.util.List;
+
+import org.apache.log4j.Logger;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.MediaType;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.ResponseBody;
+
+
+
+import com.nextech.hrms.model.Usertype;
+import com.nextech.hrms.model.Status;
+import com.nextech.hrms.services.UserTypeServices;
+
+@Controller
+@RequestMapping("/usertype")
+public class UserTypeController {
+	public static final String USER_DOES_NOT_EXISTS = "We are sorry. This user does not exist.";
+
+	@Autowired
+	UserTypeServices userTypeServices;
+
+	static final Logger logger = Logger.getLogger(UserTypeController.class);
+
+	@RequestMapping(value = "/create", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
+	public @ResponseBody Status addEmployee(@RequestBody Usertype usertype) {
+		try {
+			Usertype usertype1 = userTypeServices.getUserTypeByIdandName(usertype.getUsertypeName());
+			if(usertype1==null){
+			usertype.setIsActive(true);
+			userTypeServices.addEntity(usertype);
+			}else{
+				return new Status(1, " Usertype Name Already Exit");
+			}
+			
+		} catch (Exception e) {
+		     e.printStackTrace();
+		}
+		return new Status(1, "Employee added Successfully !");
+	}
+
+	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
+	public @ResponseBody
+	Status getEmployee(@PathVariable("id") long id) {
+		Usertype usertype = null;
+		try {
+			usertype = userTypeServices.getEntityById(id);
+			if(usertype==null){
+				return new Status(1,USER_DOES_NOT_EXISTS);
+			}
+
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+		 return new Status(1, "Employee List",usertype);
+	}
+
+	@RequestMapping(value = "/list", method = RequestMethod.GET)
+	public @ResponseBody
+    List<Usertype> getEmployee() {
+
+		List<Usertype> usertypeList = null;
+		try {
+			usertypeList = userTypeServices.getEntityList();
+
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+
+		return usertypeList;
+	}
+
+	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
+	public @ResponseBody
+	Status deleteEmployee(@PathVariable("id") long id) {
+		Usertype usertype = null;
+
+		try {
+			usertype =userTypeServices.getEntityById(id);
+            if(usertype==null){
+				return new Status(1,USER_DOES_NOT_EXISTS);
+			}
+            usertype.setIsActive(false);
+            userTypeServices.updateEntity(usertype);
+		   //employeeServices.deleteEntity(id);
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+		return new Status(1, "Employee deleted Successfully !");
+	}
+	
+	@RequestMapping(value = "/update", method = RequestMethod.PUT)
+	public @ResponseBody Status updateEntity(@RequestBody Usertype usertype) {
+		try {
+			userTypeServices.updateEntity(usertype);
+			 if(usertype==null){
+					return new Status(1,USER_DOES_NOT_EXISTS);
+				}
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+		return new Status(1, "Employee Update Successfully !");
+	}
+	
+}
diff --git src/main/java/com/nextech/hrms/dao/EmployeeAttendanceDao.java src/main/java/com/nextech/hrms/dao/EmployeeAttendanceDao.java
index a1878bb..a855fb8 100644
--- src/main/java/com/nextech/hrms/dao/EmployeeAttendanceDao.java
+++ src/main/java/com/nextech/hrms/dao/EmployeeAttendanceDao.java
@@ -17,9 +17,13 @@
 	
 	public boolean updateEntity(Employeeattendance employeeattendance) throws Exception;
 	
-	public boolean updateEntity(long id) throws Exception;
-	
 	public Employeeattendance getEmpolyeeAttendanceByIdandDate(long empId,Date date)throws Exception;
 	
-	public Employeeattendance  getEmployeeAttendanceByEmployeeId(long empId,Date date) throws Exception;
+	public List<Employeeattendance> calculateEmployeeAttendanceByEmployeeIdandDate(long empId,Date date)throws Exception;
+	
+    public List<Employeeattendance> getEmployeeattendanceByCurrentDate(Date date) throws Exception;	
+	
+	
 }
+
+
diff --git src/main/java/com/nextech/hrms/dao/EmployeeAttendanceDaoImpl.java src/main/java/com/nextech/hrms/dao/EmployeeAttendanceDaoImpl.java
deleted file mode 100644
index 6304b24..0000000
--- src/main/java/com/nextech/hrms/dao/EmployeeAttendanceDaoImpl.java
+++ /dev/null
@@ -1,112 +0,0 @@
-package com.nextech.hrms.dao;
-
-import java.util.Date;
-import java.util.List;
-
-import org.hibernate.Criteria;
-import org.hibernate.Session;
-import org.hibernate.SessionFactory;
-import org.hibernate.Transaction;
-import org.hibernate.criterion.Restrictions;
-import org.springframework.beans.factory.annotation.Autowired;
-
-import com.nextech.hrms.model.Employeeattendance;
-
-public class EmployeeAttendanceDaoImpl implements EmployeeAttendanceDao {
-
-	@Autowired
-	SessionFactory sessionFactory;
-	Session session = null;
-	Transaction tx = null;
-
-	@Override
-	public boolean addEntity(Employeeattendance employeeattendance) throws Exception {
-		session = sessionFactory.openSession();
-		tx = session.beginTransaction();
-		session.save(employeeattendance);
-		tx.commit();
-		session.close();
-		return false;
-	}
-
-	@Override
-	public Employeeattendance getEntityById(long id) throws Exception {
-
-		 session = sessionFactory.openSession();
-		Criteria criteria = session.createCriteria(Employeeattendance.class);
-		criteria.add(Restrictions.eq("isActive", true));
-		criteria.add(Restrictions.eq("employee.id", id));
-		Employeeattendance employeeattendance= criteria.list().size() > 0 ? (Employeeattendance) criteria.list().get(0): null;
-		session.close();
-		return employeeattendance;
-	}
-
-	@SuppressWarnings("unchecked")
-	@Override
-	public List<Employeeattendance> getEntityList() throws Exception {
-		session = sessionFactory.openSession();
-		tx = session.beginTransaction();
-		List<Employeeattendance> employeeattendanceList = session.createCriteria(Employeeattendance.class)
-				.list();
-		tx.commit();
-		session.close();
-		return employeeattendanceList;
-	}
-	
-	@Override
-	public boolean deleteEntity(long id)
-			throws Exception {
-		session = sessionFactory.openSession();
-		Object o = session.load(Employeeattendance.class, id);
-		tx = session.getTransaction();
-		session.beginTransaction();
-		session.delete(o);
-		tx.commit();
-		return false;
-	}
-	@Override
-	public boolean updateEntity(Employeeattendance employeeattendance)
-			throws Exception {
-		session = sessionFactory.openSession();
-		tx = session.beginTransaction();
-		session.update(employeeattendance);
-		tx.commit();
-		session.close();
-		return false;
-	}
-	
-	@Override
-	public Employeeattendance getEmpolyeeAttendanceByIdandDate(long empId,Date date)
-			throws Exception {
-		session = sessionFactory.openSession();
-		 Criteria criteria = session.createCriteria(Employeeattendance.class);
-		  criteria.add(Restrictions.eq("employee.id", empId));
-		  criteria.add(Restrictions.eq("date",date));
-		  Employeeattendance employeeattendance = criteria.list().size() > 0 ? (Employeeattendance) criteria.list().get(0) : null;
-		  return employeeattendance;
-	}
-
-	@Override
-	public boolean updateEntity(long id) throws Exception {
-		session = sessionFactory.openSession();
-		Object o = session.load(Employeeattendance.class, id);
-		tx = session.getTransaction();
-		session.beginTransaction();
-		session.update(o);
-		tx.commit();
-		return  false;
-	}
-
-	@Override
-	public Employeeattendance getEmployeeAttendanceByEmployeeId(long empId,Date date)
-			throws Exception {
-		// TODO Auto-generated method stub
-		session = sessionFactory.openSession();
-		 Criteria criteria = session.createCriteria(Employeeattendance.class);
-		  criteria.add(Restrictions.eq("employee.id", empId));
-		  criteria.add(Restrictions.eq("date", date));
-		  criteria.add(Restrictions.eq("isActive", true));
-		  Employeeattendance employeeattendance = criteria.list().size() > 0 ? (Employeeattendance) criteria.list().get(0) : null;
-		  return employeeattendance;
-	}
-}
diff --git src/main/java/com/nextech/hrms/dao/EmployeeDailyTaskDaoImpl.java src/main/java/com/nextech/hrms/dao/EmployeeDailyTaskDaoImpl.java
deleted file mode 100644
index 75646aa..0000000
--- src/main/java/com/nextech/hrms/dao/EmployeeDailyTaskDaoImpl.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package com.nextech.hrms.dao;
-
-import java.util.List;
-
-import org.hibernate.Criteria;
-import org.hibernate.Session;
-import org.hibernate.SessionFactory;
-import org.hibernate.Transaction;
-import org.hibernate.criterion.Restrictions;
-import org.springframework.beans.factory.annotation.Autowired;
-
-import com.nextech.hrms.model.Employeedailytask;
-
-public class EmployeeDailyTaskDaoImpl implements EmployeeDailyTaskDao {
-	
-	@Autowired
-	SessionFactory sessionFactory;
-	Session session = null;
-	Transaction tx = null;
-
-	@Override
-	public boolean addEntity(Employeedailytask employeedailytask) throws Exception{
-		session = sessionFactory.openSession();
-		tx = session.beginTransaction();
-		session.save(employeedailytask);
-		tx.commit();
-		session.close();
-		return false;
-	}
-	
-	public Employeedailytask getEntityById(long id) throws Exception {
-		session = sessionFactory.openSession();
-		Criteria criteria = session.createCriteria(Employeedailytask.class);
-		criteria.add(Restrictions.eq("isActive", true));
-		criteria.add(Restrictions.eq("employee.id", id));
-		Employeedailytask employeedailytask= criteria.list().size() > 0 ? (Employeedailytask) criteria.list().get(0): null;
-		session.close();
-		return employeedailytask;
-	}
-	
-	@SuppressWarnings("unchecked")
-	@Override
-	public List<Employeedailytask> getEntityList() throws Exception{
-		session = sessionFactory.openSession();
-		tx = session.beginTransaction();
-		List<Employeedailytask> employeedailytaskList = session.createCriteria(Employeedailytask.class).list();
-		tx.commit();
-		session.close();
-		return employeedailytaskList;
-	}
-	
-	@Override
-	public boolean deleteEntity(long id) throws Exception{
-		session = sessionFactory.openSession();
-		Object o = session.load(Employeedailytask.class, id);
-		tx = session.getTransaction();
-		session.beginTransaction();
-		session.delete(o);
-		tx.commit();
-		session.close();
-		return false;
-	}
-	
-	@Override
-	public boolean updateEntity(Employeedailytask employeedailytask) throws Exception{
-		session = sessionFactory.openSession();
-		tx = session.beginTransaction();
-		session.update(employeedailytask);
-		tx.commit();
-		session.close();
-		return false;
-	}
-
-}
diff --git src/main/java/com/nextech/hrms/dao/EmployeeDaoImpl.java src/main/java/com/nextech/hrms/dao/EmployeeDaoImpl.java
deleted file mode 100644
index a4d97cd..0000000
--- src/main/java/com/nextech/hrms/dao/EmployeeDaoImpl.java
+++ /dev/null
@@ -1,112 +0,0 @@
-package com.nextech.hrms.dao;
-
-import java.util.List;
-
-import org.hibernate.Criteria;
-import org.hibernate.Session;
-import org.hibernate.SessionFactory;
-import org.hibernate.Transaction;
-import org.hibernate.criterion.Restrictions;
-import org.springframework.beans.factory.annotation.Autowired;
-
-import com.nextech.hrms.model.Employee;
-
-public class EmployeeDaoImpl implements EmployeeDao {
-
-	@Autowired
-	SessionFactory sessionFactory;
-
-	Session session = null;
-	Transaction tx = null;
-
-	@Override
-	public boolean addEntity(Employee employee) throws Exception {
-
-		session = sessionFactory.openSession();
-		tx = session.beginTransaction();
-		session.save(employee);
-		tx.commit();
-		session.close();
-		return false;
-	}
-
-	@Override
-	public Employee getEntityById(long id) throws Exception {
-
-		 session = sessionFactory.openSession();
-		Criteria criteria = session.createCriteria(Employee.class);
-		criteria.add(Restrictions.eq("isActive", true));
-		criteria.add(Restrictions.eq("id", id));
-		Employee employee= criteria.list().size() > 0 ? (Employee) criteria.list().get(0): null;
-		session.close();
-		return employee;
-	}
-
-	@SuppressWarnings("unchecked")
-	@Override
-	public List<Employee> getEntityList() throws Exception {
-		session = sessionFactory.openSession();
-		tx = session.beginTransaction();
-		List<Employee> employeeList = session.createCriteria(Employee.class)
-				.list();
-		tx.commit();
-		session.close();
-		return employeeList;
-	}
-	
-	@Override
-	public boolean deleteEntity(long id)
-			throws Exception {
-		session = sessionFactory.openSession();
-		Object o = session.load(Employee.class, id);
-		tx = session.getTransaction();
-		session.beginTransaction();
-		session.delete(o);
-		tx.commit();
-		return false;
-	}
-	@Override
-	public boolean updateEntity(Employee employee)
-			throws Exception {
-		session = sessionFactory.openSession();
-		tx = session.beginTransaction();
-		session.update(employee);
-		tx.commit();
-		session.close();
-
-		return false;
-	}
-
-	@Override
-	public Employee getEmployeeByUserId(String userId) throws Exception {
-		// TODO Auto-generated method stub
-		 session = sessionFactory.openSession();
-			Criteria criteria = session.createCriteria(Employee.class);
-			criteria.add(Restrictions.eq("isActive", true));
-			criteria.add(Restrictions.eq("userid", userId));
-			Employee employee= criteria.list().size() > 0 ? (Employee) criteria.list().get(0): null;
-			session.close();
-			return employee;
-	}
-
-	@Override
-	public Employee getEmployeeByphoneNumber(String phoneNumber)
-			throws Exception {
-		session = sessionFactory.openSession();
-	  Criteria criteria = session.createCriteria(Employee.class);
-	  criteria.add(Restrictions.eq("phoneNumber",phoneNumber));
-	  Employee employee = criteria.list().size() > 0 ? (Employee) criteria.list().get(0) : null;
-	  return employee;
-		
-	}
-
-	@Override
-	public Employee getEmpolyeeByEmailid(String emailId) throws Exception {
-		session = sessionFactory.openSession();
-		  Criteria criteria = session.createCriteria(Employee.class);
-		  criteria.add(Restrictions.eq("emailid",emailId));
-		  Employee employee = criteria.list().size() > 0 ? (Employee) criteria.list().get(0) : null;
-		  return employee;
-	}
-
-}
diff --git src/main/java/com/nextech/hrms/dao/EmployeeLeaveDao.java src/main/java/com/nextech/hrms/dao/EmployeeLeaveDao.java
new file mode 100644
index 0000000..94854ff
--- /dev/null
+++ src/main/java/com/nextech/hrms/dao/EmployeeLeaveDao.java
@@ -0,0 +1,32 @@
+package com.nextech.hrms.dao;
+
+import java.util.Date;
+import java.util.List;
+
+import com.nextech.hrms.model.EmployeeLeaveDTO;
+import com.nextech.hrms.model.Employeeattendance;
+import com.nextech.hrms.model.Employeeleave;
+
+public interface EmployeeLeaveDao {
+
+	public boolean addEntity(Employeeleave employeeleave) throws Exception;
+	
+	public Employeeleave getEntityById(long id) throws Exception;
+	
+	public List<Employeeleave> getEntityList() throws Exception;
+	
+	public boolean deleteEntity(long id) throws Exception;
+	
+	public boolean updateEntity(Employeeleave employeeleave) throws Exception;
+	
+	public boolean updateEntity(long id) throws Exception;
+	
+	public Employeeleave getEmpolyeeleaveByIdandDate(long empId,Date date)throws Exception;
+	
+	public List<EmployeeLeaveDTO> getYearlyEmployeeLeaveByEmployeeId(long empId) throws Exception;
+	
+	public List<Employeeleave> getMonthlyEmployeeLeaveByEmployeeId(long empId,Date date) throws Exception;
+	
+	public List<Employeeleave> getEmployeeLeaveByCurrentDate(Date date) throws Exception;	
+	
+}
diff --git src/main/java/com/nextech/hrms/dao/UserTypeDao.java src/main/java/com/nextech/hrms/dao/UserTypeDao.java
new file mode 100644
index 0000000..33d6fe3
--- /dev/null
+++ src/main/java/com/nextech/hrms/dao/UserTypeDao.java
@@ -0,0 +1,22 @@
+package com.nextech.hrms.dao;
+
+import java.util.List;
+
+import com.nextech.hrms.model.Usertype;
+
+public interface UserTypeDao {
+
+	public boolean addEntity(Usertype usertype) throws Exception;
+	
+	public Usertype getEntityById(long id) throws Exception;
+	
+	public List<Usertype> getEntityList() throws Exception;
+	
+	public boolean deleteEntity(long id) throws Exception;
+	
+	public boolean updateEntity(Usertype usertype) throws Exception;
+	
+	public Usertype getUserTypeByIdandName(String name)throws Exception;
+	
+	
+}
diff --git src/main/java/com/nextech/hrms/daoImpl/EmployeeAttendanceDaoImpl.java src/main/java/com/nextech/hrms/daoImpl/EmployeeAttendanceDaoImpl.java
new file mode 100644
index 0000000..a606bec
--- /dev/null
+++ src/main/java/com/nextech/hrms/daoImpl/EmployeeAttendanceDaoImpl.java
@@ -0,0 +1,124 @@
+package com.nextech.hrms.daoImpl;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.List;
+
+import org.hibernate.Criteria;
+import org.hibernate.Query;
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.Transaction;
+import org.hibernate.criterion.Restrictions;
+import org.springframework.beans.factory.annotation.Autowired;
+
+import com.nextech.hrms.dao.EmployeeAttendanceDao;
+import com.nextech.hrms.model.Employeeattendance;
+
+public class EmployeeAttendanceDaoImpl implements EmployeeAttendanceDao {
+
+	@Autowired
+	SessionFactory sessionFactory;
+	Session session = null;
+	Transaction tx = null;
+
+	@Override
+	public boolean addEntity(Employeeattendance employeeattendance) throws Exception {
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		session.save(employeeattendance);
+		tx.commit();
+		session.close();
+		return false;
+	}
+
+	@Override
+	public Employeeattendance getEntityById(long id) throws Exception {
+
+		 session = sessionFactory.openSession();
+		Criteria criteria = session.createCriteria(Employeeattendance.class);
+		criteria.add(Restrictions.eq("isActive", true));
+		criteria.add(Restrictions.eq("id", id));
+		Employeeattendance employeeattendance= criteria.list().size() > 0 ? (Employeeattendance) criteria.list().get(0): null;
+		session.close();
+		return employeeattendance;
+	}
+
+	@SuppressWarnings("unchecked")
+	@Override
+	public List<Employeeattendance> getEntityList() throws Exception {
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		List<Employeeattendance> employeeattendanceList = session.createCriteria(Employeeattendance.class)
+				.list();
+		tx.commit();
+		session.close();
+		return employeeattendanceList;
+	}
+	
+	@Override
+	public boolean deleteEntity(long id)
+			throws Exception {
+		session = sessionFactory.openSession();
+		Object o = session.load(Employeeattendance.class, id);
+		tx = session.getTransaction();
+		session.beginTransaction();
+		session.delete(o);
+		tx.commit();
+		return false;
+	}
+	@Override
+	public boolean updateEntity(Employeeattendance employeeattendance)
+			throws Exception {
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		session.update(employeeattendance);
+		tx.commit();
+		session.close();
+		return false;
+	}
+	
+	@Override
+	public Employeeattendance getEmpolyeeAttendanceByIdandDate(long empId,Date date)
+			throws Exception {
+		session = sessionFactory.openSession();
+		 Criteria criteria = session.createCriteria(Employeeattendance.class);
+		  criteria.add(Restrictions.eq("employee.id", empId));
+		  criteria.add(Restrictions.eq("date",date));
+		  Employeeattendance employeeattendance = criteria.list().size() > 0 ? (Employeeattendance) criteria.list().get(0) : null;
+		  return employeeattendance;
+	}
+	
+	
+	
+	public List<Employeeattendance> calculateEmployeeAttendanceByEmployeeIdandDate(long empId,Date date)
+			throws Exception {
+		session = sessionFactory.openSession();
+		 Criteria criteria = session.createCriteria(Employeeattendance.class);
+		 Employeeattendance employeeattendance = criteria.list().size() > 0 ? (Employeeattendance) criteria.list().get(0) : null;
+		 SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy");
+		  int year = Integer.valueOf(yearFormat.format(date));
+
+		  SimpleDateFormat monthFormat = new SimpleDateFormat("MM");
+		  int month = Integer.valueOf(monthFormat .format(date));
+		  Query query = session.createQuery("from Employeeattendance where  employeeid=:employeeid and year(date)=:year and month(date)=:month");
+		  query.setParameter("employeeid", empId);
+		 query.setParameter("year", year);
+		 query.setParameter("month", month);
+		
+		 List<Employeeattendance> employeeattendances = query.list();
+		  return employeeattendances;
+	}
+
+	@Override
+	public List<Employeeattendance> getEmployeeattendanceByCurrentDate(Date date)
+			throws Exception {
+		session = sessionFactory.openSession();
+		 Criteria criteria = session.createCriteria(Employeeattendance.class);
+		  criteria.add(Restrictions.eq("date",date));
+		  List<Employeeattendance> employeeattendance =criteria.list();
+		  return employeeattendance;
+	}
+
+
+}
diff --git src/main/java/com/nextech/hrms/daoImpl/EmployeeDailyTaskDaoImpl.java src/main/java/com/nextech/hrms/daoImpl/EmployeeDailyTaskDaoImpl.java
new file mode 100644
index 0000000..2a3c2a9
--- /dev/null
+++ src/main/java/com/nextech/hrms/daoImpl/EmployeeDailyTaskDaoImpl.java
@@ -0,0 +1,75 @@
+package com.nextech.hrms.daoImpl;
+
+import java.util.List;
+
+import org.hibernate.Criteria;
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.Transaction;
+import org.hibernate.criterion.Restrictions;
+import org.springframework.beans.factory.annotation.Autowired;
+
+import com.nextech.hrms.dao.EmployeeDailyTaskDao;
+import com.nextech.hrms.model.Employeedailytask;
+
+public class EmployeeDailyTaskDaoImpl implements EmployeeDailyTaskDao {
+	
+	@Autowired
+	SessionFactory sessionFactory;
+	Session session = null;
+	Transaction tx = null;
+
+	@Override
+	public boolean addEntity(Employeedailytask employeedailytask) throws Exception{
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		session.save(employeedailytask);
+		tx.commit();
+		session.close();
+		return false;
+	}
+	
+	public Employeedailytask getEntityById(long id) throws Exception {
+		session = sessionFactory.openSession();
+		Criteria criteria = session.createCriteria(Employeedailytask.class);
+		criteria.add(Restrictions.eq("isActive", true));
+		criteria.add(Restrictions.eq("id", id));
+		Employeedailytask employeedailytask= criteria.list().size() > 0 ? (Employeedailytask) criteria.list().get(0): null;
+		session.close();
+		return employeedailytask;
+	}
+	
+	@SuppressWarnings("unchecked")
+	@Override
+	public List<Employeedailytask> getEntityList() throws Exception{
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		List<Employeedailytask> employeedailytaskList = session.createCriteria(Employeedailytask.class).list();
+		tx.commit();
+		session.close();
+		return employeedailytaskList;
+	}
+	
+	@Override
+	public boolean deleteEntity(long id) throws Exception{
+		session = sessionFactory.openSession();
+		Object o = session.load(Employeedailytask.class, id);
+		tx = session.getTransaction();
+		session.beginTransaction();
+		session.delete(o);
+		tx.commit();
+		session.close();
+		return false;
+	}
+	
+	@Override
+	public boolean updateEntity(Employeedailytask employeedailytask) throws Exception{
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		session.update(employeedailytask);
+		tx.commit();
+		session.close();
+		return false;
+	}
+
+}
diff --git src/main/java/com/nextech/hrms/daoImpl/EmployeeDaoImpl.java src/main/java/com/nextech/hrms/daoImpl/EmployeeDaoImpl.java
new file mode 100644
index 0000000..4298643
--- /dev/null
+++ src/main/java/com/nextech/hrms/daoImpl/EmployeeDaoImpl.java
@@ -0,0 +1,113 @@
+package com.nextech.hrms.daoImpl;
+
+import java.util.List;
+
+import org.hibernate.Criteria;
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.Transaction;
+import org.hibernate.criterion.Restrictions;
+import org.springframework.beans.factory.annotation.Autowired;
+
+import com.nextech.hrms.dao.EmployeeDao;
+import com.nextech.hrms.model.Employee;
+
+public class EmployeeDaoImpl implements EmployeeDao {
+
+	@Autowired
+	SessionFactory sessionFactory;
+
+	Session session = null;
+	Transaction tx = null;
+
+	@Override
+	public boolean addEntity(Employee employee) throws Exception {
+
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		session.save(employee);
+		tx.commit();
+		session.close();
+		return false;
+	}
+
+	@Override
+	public Employee getEntityById(long id) throws Exception {
+
+		 session = sessionFactory.openSession();
+		Criteria criteria = session.createCriteria(Employee.class);
+		criteria.add(Restrictions.eq("isActive", true));
+		criteria.add(Restrictions.eq("id", id));
+		Employee employee= criteria.list().size() > 0 ? (Employee) criteria.list().get(0): null;
+		session.close();
+		return employee;
+	}
+
+	@SuppressWarnings("unchecked")
+	@Override
+	public List<Employee> getEntityList() throws Exception {
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		List<Employee> employeeList = session.createCriteria(Employee.class)
+				.list();
+		tx.commit();
+		session.close();
+		return employeeList;
+	}
+	
+	@Override
+	public boolean deleteEntity(long id)
+			throws Exception {
+		session = sessionFactory.openSession();
+		Object o = session.load(Employee.class, id);
+		tx = session.getTransaction();
+		session.beginTransaction();
+		session.delete(o);
+		tx.commit();
+		return false;
+	}
+	@Override
+	public boolean updateEntity(Employee employee)
+			throws Exception {
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		session.update(employee);
+		tx.commit();
+		session.close();
+
+		return false;
+	}
+
+	@Override
+	public Employee getEmployeeByUserId(String userId) throws Exception {
+		// TODO Auto-generated method stub
+		 session = sessionFactory.openSession();
+			Criteria criteria = session.createCriteria(Employee.class);
+			criteria.add(Restrictions.eq("isActive", true));
+			criteria.add(Restrictions.eq("userid", userId));
+			Employee employee= criteria.list().size() > 0 ? (Employee) criteria.list().get(0): null;
+			session.close();
+			return employee;
+	}
+
+	@Override
+	public Employee getEmployeeByphoneNumber(String phoneNumber)
+			throws Exception {
+		session = sessionFactory.openSession();
+	  Criteria criteria = session.createCriteria(Employee.class);
+	  criteria.add(Restrictions.eq("phoneNumber",phoneNumber));
+	  Employee employee = criteria.list().size() > 0 ? (Employee) criteria.list().get(0) : null;
+	  return employee;
+		
+	}
+
+	@Override
+	public Employee getEmpolyeeByEmailid(String emailId) throws Exception {
+		session = sessionFactory.openSession();
+		  Criteria criteria = session.createCriteria(Employee.class);
+		  criteria.add(Restrictions.eq("emailid",emailId));
+		  Employee employee = criteria.list().size() > 0 ? (Employee) criteria.list().get(0) : null;
+		  return employee;
+	}
+
+}
diff --git src/main/java/com/nextech/hrms/daoImpl/EmployeeLeaveDaoImpl.java src/main/java/com/nextech/hrms/daoImpl/EmployeeLeaveDaoImpl.java
new file mode 100644
index 0000000..025be56
--- /dev/null
+++ src/main/java/com/nextech/hrms/daoImpl/EmployeeLeaveDaoImpl.java
@@ -0,0 +1,184 @@
+package com.nextech.hrms.daoImpl;
+
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import org.hibernate.Criteria;
+import org.hibernate.Query;
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.Transaction;
+import org.hibernate.criterion.Restrictions;
+import org.springframework.beans.factory.annotation.Autowired;
+
+import com.nextech.hrms.dao.EmployeeLeaveDao;
+import com.nextech.hrms.model.EmployeeLeaveDTO;
+import com.nextech.hrms.model.Employeeleave;
+
+public class EmployeeLeaveDaoImpl implements EmployeeLeaveDao {
+
+	@Autowired
+	SessionFactory sessionFactory;
+	Session session = null;
+	Transaction tx = null;
+
+	@Override
+	public boolean addEntity(Employeeleave employeeleave) throws Exception {
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		session.save(employeeleave);
+		tx.commit();
+		session.close();
+		return false;
+	}
+
+	@Override
+	public Employeeleave getEntityById(long id) throws Exception {
+
+		 session = sessionFactory.openSession();
+			Criteria criteria = session.createCriteria(Employeeleave.class);
+			criteria.add(Restrictions.eq("isActive", true));
+			criteria.add(Restrictions.eq("id", id));
+			Employeeleave employeeleave= criteria.list().size() > 0 ? (Employeeleave) criteria.list().get(0): null;
+			session.close();
+			return employeeleave;
+	}
+
+	@SuppressWarnings("unchecked")
+	@Override
+	public List<Employeeleave> getEntityList() throws Exception {
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		List<Employeeleave> employeeleaveList = session.createCriteria(Employeeleave.class)
+				.list();
+		tx.commit();
+		session.close();
+		return employeeleaveList;
+	}
+	
+	@Override
+	public boolean deleteEntity(long id)
+			throws Exception {
+		session = sessionFactory.openSession();
+		Object o = session.load(Employeeleave.class, id);
+		tx = session.getTransaction();
+		session.beginTransaction();
+		session.delete(o);
+		tx.commit();
+		return false;
+	}
+	@Override
+	public boolean updateEntity(Employeeleave employeeleave)
+			throws Exception {
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		session.update(employeeleave);
+		tx.commit();
+		session.close();
+		return false;
+	}
+	
+	@Override
+	public Employeeleave getEmpolyeeleaveByIdandDate(long empId,Date date)
+			throws Exception {
+		session = sessionFactory.openSession();
+		 Criteria criteria = session.createCriteria(Employeeleave.class);
+		  criteria.add(Restrictions.eq("employee.id", empId));
+		  criteria.add(Restrictions.eq("leavedate",date));
+		  Employeeleave employeeleave = criteria.list().size() > 0 ? (Employeeleave) criteria.list().get(0) : null;
+		  return employeeleave;
+	}
+
+	@Override
+	public boolean updateEntity(long id) throws Exception {
+		session = sessionFactory.openSession();
+		Object o = session.load(Employeeleave.class, id);
+		tx = session.getTransaction();
+		session.beginTransaction();
+		session.update(o);
+		tx.commit();
+		return  false;
+	}
+
+	@Override
+	public List<EmployeeLeaveDTO> getYearlyEmployeeLeaveByEmployeeId(long empId)
+			throws Exception {
+		  Session session = sessionFactory.openSession();
+		  session.beginTransaction();
+		  Criteria criteria = session.createCriteria(Employeeleave.class);
+		  criteria.add(Restrictions.eq("employee.id", empId));
+		  Employeeleave employeeleave = criteria.list().size() > 0 ? (Employeeleave) criteria.list().get(0) : null;
+		  
+		  SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy");
+		  int year = Integer.valueOf(yearFormat.format(employeeleave.getLeavedate()));
+		  Query query = session.createQuery("FROM Employeeleave where employeeid=:employeeid and year(leavedate)=:year");
+		 query.setParameter("employeeid", empId);
+		 query.setParameter("year", year);
+		 List<EmployeeLeaveDTO> employeeLeaveDTOs = new ArrayList<EmployeeLeaveDTO>();
+		 List<Employeeleave> employeeleaves = query.list();
+		 int totalCount=0;
+		 for (Employeeleave employeeleave1 : employeeleaves) {
+			 SimpleDateFormat dayFormat = new SimpleDateFormat("dd");
+			  int day = Integer.valueOf(dayFormat.format(employeeleave1.getLeavedate()));
+			  SimpleDateFormat dayFormat1 = new SimpleDateFormat("dd");
+			  int day1 = Integer.valueOf(dayFormat1.format(employeeleave1.getAfterleavejoiningdate()));
+			 Query query1 = session.createQuery("FROM Employeeleave where employeeid=:employeeid and Day(leavedate)=:day and Day(afterleavejoiningdate)=:day1");
+			 query1.setParameter("employeeid", empId);
+			 query1.setParameter("day", day);
+			 query1.setParameter("day1", day1);
+			 totalCount=totalCount+day1-day;
+			EmployeeLeaveDTO employeeLeaveDTO= new EmployeeLeaveDTO();
+			employeeLeaveDTO.setTotalCount(totalCount);
+			employeeLeaveDTOs.add(employeeLeaveDTO);
+		}
+		 System.out.println("Total Leave Count YEAR:"+totalCount);
+			return employeeLeaveDTOs;
+		
+	}
+
+	@Override
+	public List<Employeeleave> getMonthlyEmployeeLeaveByEmployeeId(
+			long empId, Date date) throws Exception {
+		 Session session = sessionFactory.openSession();
+		  session.beginTransaction();
+		  
+		  SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy");
+		  int year = Integer.valueOf(yearFormat.format(date));
+		  
+		  SimpleDateFormat monthFormat = new SimpleDateFormat("MM");
+		  int month = Integer.valueOf(monthFormat .format(date));
+		  Query query = session.createQuery("FROM Employeeleave where employeeid=:employeeid and year(leavedate)=:year and month(leavedate)=:month");
+		 query.setParameter("employeeid", empId);
+		 query.setParameter("year", year);
+		 query.setParameter("month", month);
+		 //query.setParameter("year1", year1);
+		 int totalCount=0;
+		 List<Employeeleave> employeeleaves = query.list();
+		 for (Employeeleave employeeleave1 : employeeleaves) {
+			 SimpleDateFormat dayFormat = new SimpleDateFormat("dd");
+			  int day = Integer.valueOf(dayFormat.format(employeeleave1.getLeavedate()));
+			  SimpleDateFormat dayFormat1 = new SimpleDateFormat("dd");
+			  int day1 = Integer.valueOf(dayFormat1.format(employeeleave1.getAfterleavejoiningdate()));
+			 Query query1 = session.createQuery("FROM Employeeleave where employeeid=:employeeid and Day(leavedate)=:day and Day(afterleavejoiningdate)=:day1");
+			 query1.setParameter("employeeid", empId);
+			 query1.setParameter("day", day);
+			 query1.setParameter("day1", day1);
+			 totalCount=totalCount+day1-day;
+		}
+		 System.out.println("Total Leave Count MONTH :"+totalCount);
+			return employeeleaves;
+	}
+
+	@Override
+	public List<Employeeleave> getEmployeeLeaveByCurrentDate(Date date)
+			throws Exception {
+			session = sessionFactory.openSession();
+			 Criteria criteria = session.createCriteria(Employeeleave.class);
+			  criteria.add(Restrictions.eq("leavedate",date));
+			  List<Employeeleave> employeeleaveList =criteria.list();
+			  return employeeleaveList;
+		}
+	
+}
diff --git src/main/java/com/nextech/hrms/daoImpl/UserTypeDaoImpl.java src/main/java/com/nextech/hrms/daoImpl/UserTypeDaoImpl.java
new file mode 100644
index 0000000..6ed4de0
--- /dev/null
+++ src/main/java/com/nextech/hrms/daoImpl/UserTypeDaoImpl.java
@@ -0,0 +1,89 @@
+package com.nextech.hrms.daoImpl;
+
+import java.util.List;
+
+import org.hibernate.Criteria;
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.Transaction;
+import org.hibernate.criterion.Restrictions;
+import org.springframework.beans.factory.annotation.Autowired;
+
+import com.nextech.hrms.dao.UserTypeDao;
+import com.nextech.hrms.model.Usertype;
+
+public class UserTypeDaoImpl implements UserTypeDao {
+
+	@Autowired
+	SessionFactory sessionFactory;
+	Session session = null;
+	Transaction tx = null;
+
+	@Override
+	public boolean addEntity(Usertype usertype) throws Exception {
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		session.save(usertype);
+		tx.commit();
+		session.close();
+		return false;
+	}
+
+	@Override
+	public Usertype getEntityById(long id) throws Exception {
+
+		 session = sessionFactory.openSession();
+		Criteria criteria = session.createCriteria(Usertype.class);
+		criteria.add(Restrictions.eq("isActive", true));
+		criteria.add(Restrictions.eq("id", id));
+		Usertype usertype= criteria.list().size() > 0 ? (Usertype) criteria.list().get(0): null;
+		session.close();
+		return usertype;
+	}
+
+	@SuppressWarnings("unchecked")
+	@Override
+	public List<Usertype> getEntityList() throws Exception {
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		List<Usertype> usertypeList = session.createCriteria(Usertype.class)
+				.list();
+		tx.commit();
+		session.close();
+		return usertypeList;
+	}
+	
+	@Override
+	public boolean deleteEntity(long id)
+			throws Exception {
+		session = sessionFactory.openSession();
+		Object o = session.load(Usertype.class, id);
+		tx = session.getTransaction();
+		session.beginTransaction();
+		session.delete(o);
+		tx.commit();
+		return false;
+	}
+	@Override
+	public boolean updateEntity(Usertype usertype)
+			throws Exception {
+		session = sessionFactory.openSession();
+		tx = session.beginTransaction();
+		session.update(usertype);
+		tx.commit();
+		session.close();
+		return false;
+	}
+	
+	@Override
+	public Usertype getUserTypeByIdandName(String name)
+			throws Exception {
+		session = sessionFactory.openSession();
+		 Criteria criteria = session.createCriteria(Usertype.class);
+		  criteria.add(Restrictions.eq("usertypeName",name));
+		  Usertype usertype = criteria.list().size() > 0 ? (Usertype) criteria.list().get(0) : null;
+		  return usertype;
+	}
+
+
+}
diff --git src/main/java/com/nextech/hrms/model/Employee.java src/main/java/com/nextech/hrms/model/Employee.java
index e92836a..76005c1 100644
--- src/main/java/com/nextech/hrms/model/Employee.java
+++ src/main/java/com/nextech/hrms/model/Employee.java
@@ -3,8 +3,12 @@
 import java.io.Serializable;
 
 import javax.persistence.*;
+import javax.validation.constraints.Pattern;
+import javax.validation.constraints.Size;
 
 import org.codehaus.jackson.annotate.JsonIgnore;
+import org.hibernate.validator.constraints.Email;
+import org.hibernate.validator.constraints.NotBlank;
 
 import java.sql.Timestamp;
 import java.util.Date;
@@ -24,7 +28,7 @@
 	@GeneratedValue(strategy=GenerationType.IDENTITY) 
 	private long id;
 
-	
+	@NotBlank(message="address should not be blank")
 	private String address;
 
 	@Temporal(TemporalType.DATE)
@@ -35,26 +39,40 @@
 	@Column(name="date_of_joining")
 	private Date dateOfJoining;
 
+	@NotBlank(message="Department should not be blank")
 	private String department;
-
+	
+	@Email(message="{Emailid should be enter valid")
+	@Size(min = 2, max = 255, message = "{Email sholud be greater than 2 or less than 255 characters}")
 	private String emailid;
 
+	@NotBlank(message="FirstName should not be blank")
+	@Pattern(regexp = "[a-zA-z]+",message="{firstName sholud be Enter only characters}")  
 	@Column(name="first_name")
 	private String firstName;
-	
 
 	private boolean isActive;
 
+	@NotBlank(message="lastName should not be blank")
+	@Pattern(regexp = "[a-zA-z]+",message="{lastName sholud be Enter only characters}") 
 	@Column(name="last_name")
 	private String lastName;
 	
+	@NotBlank(message="password should not be blank")
+    @Size(min=2,max=8,message="{password sholud be greater than 2 or less than 8 characters}")
 	private String password;
 
+    @NotBlank(message="phoneNumber should not be blank")
+    @Pattern(regexp = "[0-9]+",message="{phoneNumber sholud be Enter only Number}")  
+    @Size(min=10,max=10,message="{phoneNumber sholud be 10 Number}")
 	@Column(name="phone_number")
 	private String phoneNumber;
 
+    @NotBlank(message="salary should not be blank")
 	private String salary;
 
+	@NotBlank(message="UserId should not be blank")
+    @Size(min=2,max=255,message="{UserId sholud be greater than 2 or less than 255 characters}")
 	private String userid;
 	
 	@Column(name="created_date")
@@ -64,6 +82,7 @@
 	private Timestamp updatedDate;
 
 	//bi-directional many-to-one association to Usertype
+
 	@ManyToOne
 	@JoinColumn(name="usertypeId")
 	private Usertype usertype;
diff --git src/main/java/com/nextech/hrms/model/EmployeeLeaveDTO.java src/main/java/com/nextech/hrms/model/EmployeeLeaveDTO.java
new file mode 100644
index 0000000..43a603b
--- /dev/null
+++ src/main/java/com/nextech/hrms/model/EmployeeLeaveDTO.java
@@ -0,0 +1,15 @@
+package com.nextech.hrms.model;
+
+public class EmployeeLeaveDTO {
+	private int totalCount;
+
+	public int getTotalCount() {
+		return totalCount;
+	}
+
+	public void setTotalCount(int totalCount) {
+		this.totalCount = totalCount;
+	}
+
+	
+}
diff --git src/main/java/com/nextech/hrms/model/Employeeattendance.java src/main/java/com/nextech/hrms/model/Employeeattendance.java
index 158e08b..506706a 100644
--- src/main/java/com/nextech/hrms/model/Employeeattendance.java
+++ src/main/java/com/nextech/hrms/model/Employeeattendance.java
@@ -4,6 +4,7 @@
 
 import javax.persistence.*;
 
+
 import java.sql.Time;
 import java.util.Date;
 import java.sql.Timestamp;
@@ -26,9 +27,11 @@
 	@Column(name="created_date")
 	private Timestamp createdDate;
 
+	//@NotBlank(message="date should not be blank")
 	@Temporal(TemporalType.DATE)
 	private Date date;
 
+
 	private Time intime;
 
 	private boolean isActive;
diff --git src/main/java/com/nextech/hrms/model/Employeeleave.java src/main/java/com/nextech/hrms/model/Employeeleave.java
index 80d5275..553150e 100644
--- src/main/java/com/nextech/hrms/model/Employeeleave.java
+++ src/main/java/com/nextech/hrms/model/Employeeleave.java
@@ -1,7 +1,9 @@
 package com.nextech.hrms.model;
 
 import java.io.Serializable;
+
 import javax.persistence.*;
+
 import java.util.Date;
 import java.sql.Timestamp;
 
@@ -15,8 +17,9 @@
 public class Employeeleave implements Serializable {
 	private static final long serialVersionUID = 1L;
 
-	@Id
-	private int id;
+	@Id 
+	@GeneratedValue(strategy=GenerationType.IDENTITY) 
+	private long id;
 
 	@Temporal(TemporalType.DATE)
 	private Date afterleavejoiningdate;
@@ -24,7 +27,7 @@
 	@Column(name="created_date")
 	private Timestamp createdDate;
 
-	private byte isActive;
+	private boolean isActive;
 
 	@Temporal(TemporalType.DATE)
 	private Date leavedate;
@@ -41,12 +44,16 @@
 
 	public Employeeleave() {
 	}
+	
+	public Employeeleave(int id) {
+		this.id = id;
+	}
 
-	public int getId() {
+	public long getId() {
 		return this.id;
 	}
 
-	public void setId(int id) {
+	public void setId(long id) {
 		this.id = id;
 	}
 
@@ -66,11 +73,11 @@
 		this.createdDate = createdDate;
 	}
 
-	public byte getIsActive() {
+	public boolean getIsActive() {
 		return this.isActive;
 	}
 
-	public void setIsActive(byte isActive) {
+	public void setIsActive(boolean isActive) {
 		this.isActive = isActive;
 	}
 
diff --git src/main/java/com/nextech/hrms/services/EmployeeAttendanceServices.java src/main/java/com/nextech/hrms/services/EmployeeAttendanceServices.java
index 4516318..d96e9ff 100644
--- src/main/java/com/nextech/hrms/services/EmployeeAttendanceServices.java
+++ src/main/java/com/nextech/hrms/services/EmployeeAttendanceServices.java
@@ -17,9 +17,11 @@
 	
 	public boolean updateEntity(Employeeattendance employeeattendance) throws Exception;
 	
-	public boolean updateEntity(long id) throws Exception;
 	
 	public Employeeattendance getEmpolyeeAttendanceByIdandDate(long empId,Date date)throws Exception;
 	
-	public Employeeattendance  getEmployeeAttendanceByEmployeeId(long empId,Date date) throws Exception;
+	public List<Employeeattendance> calculateEmployeeAttendanceByEmployeeIdandDate(long empId,Date date)throws Exception;
+	
+    public List<Employeeattendance> getEmployeeattendanceByCurrentDate(Date date) throws Exception;	
+
 }
diff --git src/main/java/com/nextech/hrms/services/EmployeeAttendanceServicesImpl.java src/main/java/com/nextech/hrms/services/EmployeeAttendanceServicesImpl.java
deleted file mode 100644
index 52f2306..0000000
--- src/main/java/com/nextech/hrms/services/EmployeeAttendanceServicesImpl.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package com.nextech.hrms.services;
-
-import java.util.Date;
-import java.util.List;
-
-import org.springframework.beans.factory.annotation.Autowired;
-
-import com.nextech.hrms.dao.EmployeeAttendanceDao;
-import com.nextech.hrms.model.Employeeattendance;
-
-public class EmployeeAttendanceServicesImpl implements EmployeeAttendanceServices {
-
-	@Autowired
-	EmployeeAttendanceDao employeeAttendanceDao;
-	
-	@Override
-	public boolean addEntity(Employeeattendance employeeattendance) throws Exception {
-		return employeeAttendanceDao.addEntity(employeeattendance);
-	}
-
-	@Override
-	public Employeeattendance getEntityById(long id) throws Exception {
-		return employeeAttendanceDao.getEntityById(id);
-	}
-
-	@Override
-	public List<Employeeattendance> getEntityList() throws Exception {
-		return employeeAttendanceDao.getEntityList();
-	}
-
-	@Override
-	public boolean deleteEntity(long id) throws Exception {
-		return employeeAttendanceDao.deleteEntity(id);
-	}
-	@Override
-	public boolean updateEntity(Employeeattendance employeeattendance) throws Exception {
-		return employeeAttendanceDao.updateEntity(employeeattendance);
-	}
-
-	@Override
-	public Employeeattendance getEmpolyeeAttendanceByIdandDate(long empId,Date date)throws Exception {
-		return employeeAttendanceDao.getEmpolyeeAttendanceByIdandDate(empId, date);
-	}
-
-	@Override
-	public boolean updateEntity(long id) throws Exception {
-		return employeeAttendanceDao.updateEntity(id);
-	}
-
-	@Override
-	public Employeeattendance getEmployeeAttendanceByEmployeeId(long empId,Date date)
-			throws Exception {
-	return employeeAttendanceDao.getEmployeeAttendanceByEmployeeId(empId,date);
-	}
-
-}
diff --git src/main/java/com/nextech/hrms/services/EmployeeDailyTaskServices.java src/main/java/com/nextech/hrms/services/EmployeeDailyTaskServices.java
index 8e2b485..84f6614 100644
--- src/main/java/com/nextech/hrms/services/EmployeeDailyTaskServices.java
+++ src/main/java/com/nextech/hrms/services/EmployeeDailyTaskServices.java
@@ -16,5 +16,7 @@
 	
 	public boolean updateEntity(Employeedailytask employeedailytask) throws Exception;
 	
+	
+	
 }
 
diff --git src/main/java/com/nextech/hrms/services/EmployeeDailyTaskServicesImpl.java src/main/java/com/nextech/hrms/services/EmployeeDailyTaskServicesImpl.java
deleted file mode 100644
index 21511b9..0000000
--- src/main/java/com/nextech/hrms/services/EmployeeDailyTaskServicesImpl.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.nextech.hrms.services;
-import java.util.List;
-
-import org.springframework.beans.factory.annotation.Autowired;
-
-import com.nextech.hrms.dao.EmployeeDailyTaskDao;
-import com.nextech.hrms.model.Employeedailytask;
-
-public class EmployeeDailyTaskServicesImpl implements EmployeeDailyTaskServices {
-
-	@Autowired
-	EmployeeDailyTaskDao employeeDailyTaskDao;
-	
-	@Override
-	public boolean addEntity(Employeedailytask employeedailytask) throws Exception {
-		return employeeDailyTaskDao.addEntity(employeedailytask);
-	}
-
-	@Override
-	public Employeedailytask getEntityById(long id) throws Exception {
-		return employeeDailyTaskDao.getEntityById(id);
-	}
-
-	@Override
-	public List<Employeedailytask> getEntityList() throws Exception {
-		return employeeDailyTaskDao.getEntityList();
-	}
-
-	@Override
-	public boolean deleteEntity(long id) throws Exception {
-		return employeeDailyTaskDao.deleteEntity(id);
-	}
-	@Override
-	public boolean updateEntity(Employeedailytask employeedailytask) throws Exception {
-		return employeeDailyTaskDao.updateEntity(employeedailytask);
-	}
-
-	
-
-}
-
diff --git src/main/java/com/nextech/hrms/services/EmployeeLeaveServices.java src/main/java/com/nextech/hrms/services/EmployeeLeaveServices.java
new file mode 100644
index 0000000..262caf7
--- /dev/null
+++ src/main/java/com/nextech/hrms/services/EmployeeLeaveServices.java
@@ -0,0 +1,31 @@
+package com.nextech.hrms.services;
+
+import java.util.Date;
+import java.util.List;
+
+import com.nextech.hrms.model.EmployeeLeaveDTO;
+import com.nextech.hrms.model.Employeeleave;
+
+public interface EmployeeLeaveServices {
+	
+	public boolean addEntity(Employeeleave employeeleave) throws Exception;
+	
+	public Employeeleave getEntityById(long id) throws Exception;
+	
+	public List<Employeeleave> getEntityList() throws Exception;
+	
+	public boolean deleteEntity(long id) throws Exception;
+	
+	public boolean updateEntity(Employeeleave employeeleave) throws Exception;
+	
+	public boolean updateEntity(long id) throws Exception;
+	
+	public Employeeleave getEmpolyeeleaveByIdandDate(long empId,Date date)throws Exception;
+	
+	public List<EmployeeLeaveDTO> getYearlyEmployeeLeaveByEmployeeId(long empId) throws Exception;
+	
+	public List<Employeeleave> getMonthlyEmployeeLeaveByEmployeeId(long empId,Date date)throws Exception;
+	
+	public List<Employeeleave> getEmployeeLeaveByCurrentDate(Date date) throws Exception;	
+	
+}
diff --git src/main/java/com/nextech/hrms/services/EmployeeServicesImpl.java src/main/java/com/nextech/hrms/services/EmployeeServicesImpl.java
deleted file mode 100644
index 3b418dc..0000000
--- src/main/java/com/nextech/hrms/services/EmployeeServicesImpl.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package com.nextech.hrms.services;
-
-import java.util.List;
-
-import org.springframework.beans.factory.annotation.Autowired;
-
-import com.nextech.hrms.dao.EmployeeDao;
-import com.nextech.hrms.model.Employee;
-
-public class EmployeeServicesImpl implements EmployeeServices {
-
-	@Autowired
-	EmployeeDao employeeDao;
-	
-	@Override
-	public boolean addEntity(Employee employee) throws Exception {
-		return employeeDao.addEntity(employee);
-	}
-
-	@Override
-	public Employee getEntityById(long id) throws Exception {
-		return employeeDao.getEntityById(id);
-	}
-
-	@Override
-	public List<Employee> getEntityList() throws Exception {
-		return employeeDao.getEntityList();
-	}
-
-	@Override
-	public boolean deleteEntity(long id) throws Exception {
-		return employeeDao.deleteEntity(id);
-	}
-	@Override
-	public boolean updateEntity(Employee employee) throws Exception {
-		return employeeDao.updateEntity(employee);
-	}
-
-	@Override
-	public Employee getEmployeeByUserId(String userId) throws Exception {
-		return employeeDao.getEmployeeByUserId(userId);
-	}
-
-	@Override
-	public Employee getEmployeeByphoneNumber(String phoneNumber) throws Exception {
-		return employeeDao.getEmployeeByphoneNumber(phoneNumber);
-		
-	}
-
-	@Override
-	public Employee getEmpolyeeByEmailid(String emailId) throws Exception {
-		return employeeDao.getEmpolyeeByEmailid(emailId);
-	}
-
-}
diff --git src/main/java/com/nextech/hrms/services/UserTypeServices.java src/main/java/com/nextech/hrms/services/UserTypeServices.java
new file mode 100644
index 0000000..71049ff
--- /dev/null
+++ src/main/java/com/nextech/hrms/services/UserTypeServices.java
@@ -0,0 +1,22 @@
+package com.nextech.hrms.services;
+
+import java.util.List;
+
+import com.nextech.hrms.model.Usertype;
+
+public interface UserTypeServices {
+	
+	public boolean addEntity(Usertype usertype) throws Exception;
+	
+	public Usertype getEntityById(long id) throws Exception;
+	
+	public List<Usertype> getEntityList() throws Exception;
+	
+	public boolean deleteEntity(long id) throws Exception;
+	
+	public boolean updateEntity(Usertype usertype) throws Exception;
+	
+	public Usertype getUserTypeByIdandName(String name)throws Exception;
+	
+	
+}
diff --git src/main/java/com/nextech/hrms/servicesImpl/EmployeeAttendanceServicesImpl.java src/main/java/com/nextech/hrms/servicesImpl/EmployeeAttendanceServicesImpl.java
new file mode 100644
index 0000000..620fa0d
--- /dev/null
+++ src/main/java/com/nextech/hrms/servicesImpl/EmployeeAttendanceServicesImpl.java
@@ -0,0 +1,60 @@
+package com.nextech.hrms.servicesImpl;
+
+import java.util.Date;
+import java.util.List;
+
+import org.springframework.beans.factory.annotation.Autowired;
+
+import com.nextech.hrms.dao.EmployeeAttendanceDao;
+import com.nextech.hrms.model.Employeeattendance;
+import com.nextech.hrms.services.EmployeeAttendanceServices;
+
+public class EmployeeAttendanceServicesImpl implements EmployeeAttendanceServices {
+
+	@Autowired
+	EmployeeAttendanceDao employeeAttendanceDao;
+	
+	@Override
+	public boolean addEntity(Employeeattendance employeeattendance) throws Exception {
+		return employeeAttendanceDao.addEntity(employeeattendance);
+	}
+
+	@Override
+	public Employeeattendance getEntityById(long id) throws Exception {
+		return employeeAttendanceDao.getEntityById(id);
+	}
+
+	@Override
+	public List<Employeeattendance> getEntityList() throws Exception {
+		return employeeAttendanceDao.getEntityList();
+	}
+
+	@Override
+	public boolean deleteEntity(long id) throws Exception {
+		return employeeAttendanceDao.deleteEntity(id);
+	}
+	@Override
+	public boolean updateEntity(Employeeattendance employeeattendance) throws Exception {
+		return employeeAttendanceDao.updateEntity(employeeattendance);
+	}
+
+	@Override
+	public Employeeattendance getEmpolyeeAttendanceByIdandDate(long empId,Date date)throws Exception {
+		return employeeAttendanceDao.getEmpolyeeAttendanceByIdandDate(empId, date);
+	}
+
+	@Override
+	public List<Employeeattendance>  calculateEmployeeAttendanceByEmployeeIdandDate(
+			long empId, Date date) throws Exception {
+		return employeeAttendanceDao.calculateEmployeeAttendanceByEmployeeIdandDate(empId, date);
+	}
+
+	@Override
+	public List<Employeeattendance> getEmployeeattendanceByCurrentDate(Date date)
+			throws Exception {
+		return employeeAttendanceDao.getEmployeeattendanceByCurrentDate(date);
+	}
+
+
+
+}
diff --git src/main/java/com/nextech/hrms/servicesImpl/EmployeeDailyTaskServicesImpl.java src/main/java/com/nextech/hrms/servicesImpl/EmployeeDailyTaskServicesImpl.java
new file mode 100644
index 0000000..ca655b4
--- /dev/null
+++ src/main/java/com/nextech/hrms/servicesImpl/EmployeeDailyTaskServicesImpl.java
@@ -0,0 +1,42 @@
+package com.nextech.hrms.servicesImpl;
+import java.util.List;
+
+import org.springframework.beans.factory.annotation.Autowired;
+
+import com.nextech.hrms.dao.EmployeeDailyTaskDao;
+import com.nextech.hrms.model.Employeedailytask;
+import com.nextech.hrms.services.EmployeeDailyTaskServices;
+
+public class EmployeeDailyTaskServicesImpl implements EmployeeDailyTaskServices {
+
+	@Autowired
+	EmployeeDailyTaskDao employeeDailyTaskDao;
+	
+	@Override
+	public boolean addEntity(Employeedailytask employeedailytask) throws Exception {
+		return employeeDailyTaskDao.addEntity(employeedailytask);
+	}
+
+	@Override
+	public Employeedailytask getEntityById(long id) throws Exception {
+		return employeeDailyTaskDao.getEntityById(id);
+	}
+
+	@Override
+	public List<Employeedailytask> getEntityList() throws Exception {
+		return employeeDailyTaskDao.getEntityList();
+	}
+
+	@Override
+	public boolean deleteEntity(long id) throws Exception {
+		return employeeDailyTaskDao.deleteEntity(id);
+	}
+	@Override
+	public boolean updateEntity(Employeedailytask employeedailytask) throws Exception {
+		return employeeDailyTaskDao.updateEntity(employeedailytask);
+	}
+
+	
+
+}
+
diff --git src/main/java/com/nextech/hrms/servicesImpl/EmployeeLeaveServicesImpl.java src/main/java/com/nextech/hrms/servicesImpl/EmployeeLeaveServicesImpl.java
new file mode 100644
index 0000000..dd714d9
--- /dev/null
+++ src/main/java/com/nextech/hrms/servicesImpl/EmployeeLeaveServicesImpl.java
@@ -0,0 +1,70 @@
+package com.nextech.hrms.servicesImpl;
+
+import java.util.Date;
+import java.util.List;
+
+import org.springframework.beans.factory.annotation.Autowired;
+
+import com.nextech.hrms.dao.EmployeeLeaveDao;
+import com.nextech.hrms.model.EmployeeLeaveDTO;
+import com.nextech.hrms.model.Employeeleave;
+import com.nextech.hrms.services.EmployeeLeaveServices;
+
+public class EmployeeLeaveServicesImpl implements EmployeeLeaveServices {
+
+	@Autowired
+	EmployeeLeaveDao employeeLeaveDao;
+	
+	@Override
+	public boolean addEntity(Employeeleave employeeleave) throws Exception {
+		return employeeLeaveDao.addEntity(employeeleave);
+	}
+
+	@Override
+	public Employeeleave getEntityById(long id) throws Exception {
+		return employeeLeaveDao.getEntityById(id);
+	}
+
+	@Override
+	public List<Employeeleave> getEntityList() throws Exception {
+		return employeeLeaveDao.getEntityList();
+	}
+
+	@Override
+	public boolean deleteEntity(long id) throws Exception {
+		return employeeLeaveDao.deleteEntity(id);
+	}
+	@Override
+	public boolean updateEntity(Employeeleave employeeleave) throws Exception {
+		return employeeLeaveDao.updateEntity(employeeleave);
+	}
+
+	@Override
+	public Employeeleave getEmpolyeeleaveByIdandDate(long empId,Date date)throws Exception {
+		return employeeLeaveDao.getEmpolyeeleaveByIdandDate(empId, date);
+	}
+
+	@Override
+	public boolean updateEntity(long id) throws Exception {
+		return employeeLeaveDao.updateEntity(id);
+	}
+
+	@Override
+	public List<EmployeeLeaveDTO> getYearlyEmployeeLeaveByEmployeeId(long empId)
+			throws Exception {
+		return employeeLeaveDao.getYearlyEmployeeLeaveByEmployeeId(empId);
+	}
+
+	@Override
+	public List<Employeeleave> getMonthlyEmployeeLeaveByEmployeeId(
+			long empId, Date date) throws Exception {
+		return employeeLeaveDao.getMonthlyEmployeeLeaveByEmployeeId(empId, date);
+	}
+
+	@Override
+	public List<Employeeleave> getEmployeeLeaveByCurrentDate(Date date)
+			throws Exception {
+		return employeeLeaveDao.getEmployeeLeaveByCurrentDate(date);
+	}
+
+}
diff --git src/main/java/com/nextech/hrms/servicesImpl/EmployeeServicesImpl.java src/main/java/com/nextech/hrms/servicesImpl/EmployeeServicesImpl.java
new file mode 100644
index 0000000..370a064
--- /dev/null
+++ src/main/java/com/nextech/hrms/servicesImpl/EmployeeServicesImpl.java
@@ -0,0 +1,56 @@
+package com.nextech.hrms.servicesImpl;
+
+import java.util.List;
+
+import org.springframework.beans.factory.annotation.Autowired;
+
+import com.nextech.hrms.dao.EmployeeDao;
+import com.nextech.hrms.model.Employee;
+import com.nextech.hrms.services.EmployeeServices;
+
+public class EmployeeServicesImpl implements EmployeeServices {
+
+	@Autowired
+	EmployeeDao employeeDao;
+	
+	@Override
+	public boolean addEntity(Employee employee) throws Exception {
+		return employeeDao.addEntity(employee);
+	}
+
+	@Override
+	public Employee getEntityById(long id) throws Exception {
+		return employeeDao.getEntityById(id);
+	}
+
+	@Override
+	public List<Employee> getEntityList() throws Exception {
+		return employeeDao.getEntityList();
+	}
+
+	@Override
+	public boolean deleteEntity(long id) throws Exception {
+		return employeeDao.deleteEntity(id);
+	}
+	@Override
+	public boolean updateEntity(Employee employee) throws Exception {
+		return employeeDao.updateEntity(employee);
+	}
+
+	@Override
+	public Employee getEmployeeByUserId(String userId) throws Exception {
+		return employeeDao.getEmployeeByUserId(userId);
+	}
+
+	@Override
+	public Employee getEmployeeByphoneNumber(String phoneNumber) throws Exception {
+		return employeeDao.getEmployeeByphoneNumber(phoneNumber);
+		
+	}
+
+	@Override
+	public Employee getEmpolyeeByEmailid(String emailId) throws Exception {
+		return employeeDao.getEmpolyeeByEmailid(emailId);
+	}
+
+}
diff --git src/main/java/com/nextech/hrms/servicesImpl/UserTypeServicesImpl.java src/main/java/com/nextech/hrms/servicesImpl/UserTypeServicesImpl.java
new file mode 100644
index 0000000..c6f7d97
--- /dev/null
+++ src/main/java/com/nextech/hrms/servicesImpl/UserTypeServicesImpl.java
@@ -0,0 +1,45 @@
+package com.nextech.hrms.servicesImpl;
+import java.util.List;
+
+import org.springframework.beans.factory.annotation.Autowired;
+
+import com.nextech.hrms.dao.UserTypeDao;
+import com.nextech.hrms.model.Usertype;
+import com.nextech.hrms.services.UserTypeServices;
+
+public class UserTypeServicesImpl implements UserTypeServices {
+
+	@Autowired
+	UserTypeDao userTypeDao;
+	
+	@Override
+	public boolean addEntity(Usertype usertype) throws Exception {
+		return userTypeDao.addEntity(usertype);
+	}
+
+	@Override
+	public Usertype getEntityById(long id) throws Exception {
+		return userTypeDao.getEntityById(id);
+	}
+
+	@Override
+	public List<Usertype> getEntityList() throws Exception {
+		return userTypeDao.getEntityList();
+	}
+
+	@Override
+	public boolean deleteEntity(long id) throws Exception {
+		return userTypeDao.deleteEntity(id);
+	}
+	@Override
+	public boolean updateEntity(Usertype usertype) throws Exception {
+		return userTypeDao.updateEntity(usertype);
+	}
+
+	@Override
+	public Usertype getUserTypeByIdandName(String name)throws Exception {
+		return userTypeDao.getUserTypeByIdandName(name);
+	}
+
+
+}
diff --git src/main/java/com/nextech/hrms/util/DateUtil.java src/main/java/com/nextech/hrms/util/DateUtil.java
new file mode 100644
index 0000000..bfc0cfc
--- /dev/null
+++ src/main/java/com/nextech/hrms/util/DateUtil.java
@@ -0,0 +1,17 @@
+package com.nextech.hrms.util;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+public class DateUtil {
+public static Date convertToDate(String date) throws ParseException{
+SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
+return format.parse(date);
+}
+
+public static String convertToString(Date date) throws ParseException{
+SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
+return format.format(date);
+}
+}
diff --git src/main/java/com/nextech/hrms/util/YearUtil.java src/main/java/com/nextech/hrms/util/YearUtil.java
new file mode 100644
index 0000000..f69e113
--- /dev/null
+++ src/main/java/com/nextech/hrms/util/YearUtil.java
@@ -0,0 +1,17 @@
+package com.nextech.hrms.util;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+public class YearUtil {
+	public static Date convertToDate(String date) throws ParseException{
+		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM");
+		return format.parse(date);
+		}
+
+		public static String convertToString(Date date) throws ParseException{
+		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM");
+		return format.format(date);
+		}
+}
diff --git "a/src/main/resources/log4j\0501\051.properties" "b/src/main/resources/log4j\0501\051.properties"
new file mode 100644
index 0000000..ac676a8
--- /dev/null
+++ "b/src/main/resources/log4j\0501\051.properties"
@@ -0,0 +1,19 @@
+# Root logger option
+
+log4j.rootLogger=INFO, file, stdout
+
+#log4j.logger.org.quartz=DEBUG
+
+# Direct log messages to a log file
+log4j.appender.file=org.apache.log4j.RollingFileAppender
+log4j.appender.file.File=D:/app_log.log
+log4j.appender.file.MaxFileSize=100MB
+log4j.appender.file.MaxBackupIndex=7
+log4j.appender.file.layout=org.apache.log4j.PatternLayout
+log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
+
+# Direct log messages to stdout
+log4j.appender.stdout=org.apache.log4j.ConsoleAppender
+log4j.appender.stdout.Target=System.out
+log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
+log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
diff --git src/main/webapp/WEB-INF/spring-config.xml src/main/webapp/WEB-INF/spring-config.xml
index 851729e..d5d943c 100644
--- src/main/webapp/WEB-INF/spring-config.xml
+++ src/main/webapp/WEB-INF/spring-config.xml
@@ -41,14 +41,26 @@
 		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
 		<property name="sessionFactory" ref="sessionFactory" />
 	</bean>
+	<bean
+		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
+		<property name="exceptionMappings">
+			<props>
+				<prop key="java.lang.Exception">Error</prop>
+			</props>
+		</property>
+	</bean>
 
 	<bean id="persistenceExceptionTranslationPostProcessor"
 		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
 
-	<bean id="employeeDao" class="com.nextech.hrms.dao.EmployeeDaoImpl"></bean>
-	<bean id="employeeServices" class="com.nextech.hrms.services.EmployeeServicesImpl"></bean>
-	<bean id="employeeAttendanceDao" class="com.nextech.hrms.dao.EmployeeAttendanceDaoImpl"></bean>
-	<bean id="employeeAttendanceServices" class="com.nextech.hrms.services.EmployeeAttendanceServicesImpl"></bean>
-	<bean id="employeeDailyTaskDao" class="com.nextech.hrms.dao.EmployeeDailyTaskDaoImpl"></bean>
-	<bean id="employeeDailyTaskServices" class="com.nextech.hrms.services.EmployeeDailyTaskServicesImpl"></bean>
+	<bean id="employeeDao" class="com.nextech.hrms.daoImpl.EmployeeDaoImpl"></bean>
+	<bean id="employeeServices" class="com.nextech.hrms.servicesImpl.EmployeeServicesImpl"></bean>
+	<bean id="employeeAttendanceDao" class="com.nextech.hrms.daoImpl.EmployeeAttendanceDaoImpl"></bean>
+	<bean id="employeeAttendanceServices" class="com.nextech.hrms.servicesImpl.EmployeeAttendanceServicesImpl"></bean>
+	<bean id="employeeDailyTaskDao" class="com.nextech.hrms.daoImpl.EmployeeDailyTaskDaoImpl"></bean>
+	<bean id="employeeDailyTaskServices" class="com.nextech.hrms.servicesImpl.EmployeeDailyTaskServicesImpl"></bean>
+	<bean id="employeeLeaveDao" class="com.nextech.hrms.daoImpl.EmployeeLeaveDaoImpl"></bean>
+	<bean id="employeeLeaveServices" class="com.nextech.hrms.servicesImpl.EmployeeLeaveServicesImpl"></bean>
+	<bean id="userTypeDao" class="com.nextech.hrms.daoImpl.UserTypeDaoImpl"></bean>
+	<bean id="userTypeServices" class="com.nextech.hrms.servicesImpl.UserTypeServicesImpl"></bean>
 </beans>
\ No newline at end of file
diff --git src/main/webapp/WEB-INF/web.xml src/main/webapp/WEB-INF/web.xml
index f887a22..3d677c8 100644
--- src/main/webapp/WEB-INF/web.xml
+++ src/main/webapp/WEB-INF/web.xml
@@ -8,6 +8,11 @@
       <param-name>contextConfigLocation</param-name>
       <param-value>/WEB-INF/spring-config.xml</param-value>
     </init-param>
+    <init-param>
+      <param-name>javax.faces.VALIDATE_EMPTY_FIELDS</param-name>
+      <param-value>false</param-value>
+    </init-param>
+    
     <load-on-startup>1</load-on-startup>
   </servlet>
   <servlet-mapping>
diff --git target/classes/com/nextech/hrms/controller/EmployeeAttendanceController.class target/classes/com/nextech/hrms/controller/EmployeeAttendanceController.class
index f1e5bc9..4260798 100644
--- target/classes/com/nextech/hrms/controller/EmployeeAttendanceController.class
+++ target/classes/com/nextech/hrms/controller/EmployeeAttendanceController.class
Binary files differ
diff --git target/classes/com/nextech/hrms/controller/EmployeeController.class target/classes/com/nextech/hrms/controller/EmployeeController.class
index d1dbcdf..7204f5f 100644
--- target/classes/com/nextech/hrms/controller/EmployeeController.class
+++ target/classes/com/nextech/hrms/controller/EmployeeController.class
Binary files differ
diff --git target/classes/com/nextech/hrms/controller/EmployeeDailyTaskController.class target/classes/com/nextech/hrms/controller/EmployeeDailyTaskController.class
index a779f72..db82015 100644
--- target/classes/com/nextech/hrms/controller/EmployeeDailyTaskController.class
+++ target/classes/com/nextech/hrms/controller/EmployeeDailyTaskController.class
Binary files differ
diff --git target/classes/com/nextech/hrms/dao/EmployeeAttendanceDao.class target/classes/com/nextech/hrms/dao/EmployeeAttendanceDao.class
index 8a9e561..a2a5880 100644
--- target/classes/com/nextech/hrms/dao/EmployeeAttendanceDao.class
+++ target/classes/com/nextech/hrms/dao/EmployeeAttendanceDao.class
Binary files differ
diff --git target/classes/com/nextech/hrms/dao/EmployeeAttendanceDaoImpl.class target/classes/com/nextech/hrms/dao/EmployeeAttendanceDaoImpl.class
deleted file mode 100644
index 1570bbb..0000000
--- target/classes/com/nextech/hrms/dao/EmployeeAttendanceDaoImpl.class
+++ /dev/null
Binary files differ
diff --git target/classes/com/nextech/hrms/dao/EmployeeDailyTaskDaoImpl.class target/classes/com/nextech/hrms/dao/EmployeeDailyTaskDaoImpl.class
deleted file mode 100644
index f244f2f..0000000
--- target/classes/com/nextech/hrms/dao/EmployeeDailyTaskDaoImpl.class
+++ /dev/null
Binary files differ
diff --git target/classes/com/nextech/hrms/dao/EmployeeDaoImpl.class target/classes/com/nextech/hrms/dao/EmployeeDaoImpl.class
deleted file mode 100644
index 59b2e00..0000000
--- target/classes/com/nextech/hrms/dao/EmployeeDaoImpl.class
+++ /dev/null
Binary files differ
diff --git target/classes/com/nextech/hrms/model/Employee.class target/classes/com/nextech/hrms/model/Employee.class
index f4e7550..4837aff 100644
--- target/classes/com/nextech/hrms/model/Employee.class
+++ target/classes/com/nextech/hrms/model/Employee.class
Binary files differ
diff --git target/classes/com/nextech/hrms/model/Employeeattendance.class target/classes/com/nextech/hrms/model/Employeeattendance.class
index 356761b..26cbc12 100644
--- target/classes/com/nextech/hrms/model/Employeeattendance.class
+++ target/classes/com/nextech/hrms/model/Employeeattendance.class
Binary files differ
diff --git target/classes/com/nextech/hrms/model/Employeeleave.class target/classes/com/nextech/hrms/model/Employeeleave.class
index 0a5ae21..c55e5ce 100644
--- target/classes/com/nextech/hrms/model/Employeeleave.class
+++ target/classes/com/nextech/hrms/model/Employeeleave.class
Binary files differ
diff --git target/classes/com/nextech/hrms/services/EmployeeAttendanceServices.class target/classes/com/nextech/hrms/services/EmployeeAttendanceServices.class
index 86202fc..f0127cd 100644
--- target/classes/com/nextech/hrms/services/EmployeeAttendanceServices.class
+++ target/classes/com/nextech/hrms/services/EmployeeAttendanceServices.class
Binary files differ
diff --git target/classes/com/nextech/hrms/services/EmployeeAttendanceServicesImpl.class target/classes/com/nextech/hrms/services/EmployeeAttendanceServicesImpl.class
deleted file mode 100644
index 2004288..0000000
--- target/classes/com/nextech/hrms/services/EmployeeAttendanceServicesImpl.class
+++ /dev/null
Binary files differ
diff --git target/classes/com/nextech/hrms/services/EmployeeDailyTaskServicesImpl.class target/classes/com/nextech/hrms/services/EmployeeDailyTaskServicesImpl.class
deleted file mode 100644
index 3314f33..0000000
--- target/classes/com/nextech/hrms/services/EmployeeDailyTaskServicesImpl.class
+++ /dev/null
Binary files differ
diff --git target/classes/com/nextech/hrms/services/EmployeeServicesImpl.class target/classes/com/nextech/hrms/services/EmployeeServicesImpl.class
deleted file mode 100644
index 148e380..0000000
--- target/classes/com/nextech/hrms/services/EmployeeServicesImpl.class
+++ /dev/null
Binary files differ
diff --git target/m2e-wtp/web-resources/.gitignore target/m2e-wtp/web-resources/.gitignore
deleted file mode 100644
index 3385916..0000000
--- target/m2e-wtp/web-resources/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/META-INF/